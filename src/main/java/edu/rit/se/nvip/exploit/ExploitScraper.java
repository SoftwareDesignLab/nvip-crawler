/**
 * Copyright 2023 Rochester Institute of Technology (RIT). Developed with
 * government support under contract 70RSAT19CB0000020 awarded by the United
 * States Department of Homeland Security.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
package edu.rit.se.nvip.exploit;

import edu.rit.se.nvip.model.Exploit;
import edu.rit.se.nvip.crawler.github.GitController;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

import java.io.*;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.*;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

/**
 * for Scraping ExploitDB for exploits and return exploits found for CVEs
 */
public class ExploitScraper {

	static ExploitScraper loader;

	private static final Logger logger = LogManager.getLogger(ExploitScraper.class);

	// nvip exploit repo path
	/**
	 * TODO: should be envvaar
	 */
	private static final String nvipExploitRepoDir = "exploit-repo";

	/**
	 * maps CVE-IDs to the Exploits
	 */
	private final HashMap<String, List<Exploit>> mapCveIdToExploit = new HashMap<>();

	protected final String regexCVEID = "CVE-\\d{4}-\\d{4,}";

	private String edbUrl;
	private String nvipDataPath;


	public static void main(String[] args) {
		ExploitScraper main = new ExploitScraper("nvip_data", "https://gitlab.com/exploit-database/exploitdb");
		main.updateGitRepo();
		logger.info("Repo Cloned, grabbing Exploits now");
		HashMap<String, List<Exploit>> results = main.fillCVEtoIdMap();

		for (String cveId: results.keySet()) {
			//logger.info("CVE: {}", cveId);
			//if (cveId.equals("CVE-2007-3554"))
				for (Exploit exploit: results.get(cveId)) {
					System.out.println(exploit);
				}
		}

	}

	/**
	 * contructor for ExploitScraper
	 * @param nvipDataPath
	 * @param edbUrl
	 */
	public ExploitScraper(String nvipDataPath, String edbUrl) {
		this.nvipDataPath = nvipDataPath;
		this.edbUrl = edbUrl;
		logger.info("Using NVIPDataPath: " + nvipDataPath);
	}

	/**
	 * Pull/Clone git repo at specified git URL for ExploitDB
	 */
	public void updateGitRepo() {
		// nvip exploit repo for Exploit DB
		String exploitDbRepoDir = "exploitdb";
		Path gitFolder = Paths.get(nvipDataPath, nvipExploitRepoDir, exploitDbRepoDir);
		// we get exploits from this remote repo
		GitController gitController = new GitController(gitFolder.toString(), this.edbUrl);

		File f = new File(gitFolder.toString());
		boolean pullDir = false;

		if (!f.exists())
			f.mkdirs();
		try {
			pullDir = f.exists() && f.list().length >= 1;
		} catch (Exception e) {
			logger.error("ERROR: Failed to pull from ExploitDB Repo\n{}", e.toString());
		}

		if (pullDir) {
			logger.info("Pulling ExploitDB repo for recent commits @ {}. This may take some time...", edbUrl);
			if (gitController.pullRepo())
				logger.info("Pulled git repo at: " + this.edbUrl + " to: " + gitFolder);
			else
				logger.error("Failed to pull git repo at: " + this.edbUrl + " to: " + gitFolder);
		} else {
			logger.info("Cloning ExploitDB repo @ {}. This could take some time...", edbUrl);
			if (gitController.cloneRepo())
				logger.info("Cloned git repo at: " + this.edbUrl + " to: " + gitFolder);
			else
				logger.error("Could not clone git repo at: " + this.edbUrl + " to: " + gitFolder);
		}
	}


	/**
	 * Get list of Exploit script paths from CVE-ID. You need to go to the directory <nvipDataPath> +
	 * "/<nvipExploitRepoDir>/<exploitDbRepoDir>/" to find each exploit script.
	 * <p>
	 * Ee: CVE-2020-1234 --> [exploits/windows/dos/13.c,exploits/windows/dos/17.pl]
	 *
	 * TODO: Not sure whhy this is needed, why not just return the hashmap and have the identifier sort them out?
	 *
	 * @param cveId CVEID CVE-XXXX-XXXX
	 * @return A list of exploits!
	 */
	public List<Exploit> getExploits(String cveId) {
		if (mapCveIdToExploit.containsKey(cveId)) {
			return mapCveIdToExploit.get(cveId);
		}
		return new ArrayList<>();
	}

	/**
	 * Takes ExploitDb IDs found inside of files_exploits.csv and uses that to find the associated CVE
	 * IDs and fills up hash maps that keep track of ExploitDB ID--> CVE-ID and CVE-ID--> Exploit Path
	 * mappings.
	 * Ex File Header: id,file,description,date,author,type,platform,port
	 * Ex Row: 9,exploits/windows/dos/9.c,"Apache 2.x Memory Leak",2003-04-09,"NA",dos,windows,
	 */
	public HashMap<String, List<Exploit>> fillCVEtoIdMap() {

		String exploitFile = this.nvipDataPath + "/" + nvipExploitRepoDir + "/exploitdb/files_exploits.csv";

		try {
			BufferedReader reader = new BufferedReader(new FileReader(exploitFile));
			String line;
			while((line = reader.readLine()) != null) {
				String[] columns = line.split(",");

				// Check if there's a CVEID listed in the exploitdb entry
				if (columns.length > 11 && !columns[11].isEmpty()) {
					String[] vulnids = columns[11].split(";");
					for (int i=0; i<vulnids.length; i++) {
						// Clean out \" chars and incorrect '-' values
						String vulnid = vulnids[i].replace("\"", "").replace("–", "-").replace("‑", "-").trim();
						Pattern cveIdRegexPattern = Pattern.compile(regexCVEID);
						Matcher regexMatcher = cveIdRegexPattern.matcher(vulnid);

						// If a CVEID is found, add the entry to the hashmap
						if (regexMatcher.matches()) {
							int exploitID = Integer.parseInt(columns[0]);
							String publishedDate = columns[3];

							// Might need to envvar this? idk if it'd be worth it though
							String exploitDBUrl = "https://www.exploit-db.com/exploits/" + exploitID;
							String description = columns[2];

							Exploit exploit = new Exploit(vulnid, exploitID, publishedDate, exploitDBUrl,
									description, vulnid, LocalDateTime.now().format(DateTimeFormatter.ofPattern("yyyy-MM-dd hh-mm-ss")));

							if (mapCveIdToExploit.containsValue(vulnid)) {
								mapCveIdToExploit.get(vulnid).add(exploit);
							} else {
								List<Exploit> newExploitList = new ArrayList<>();
								newExploitList.add(exploit);
								mapCveIdToExploit.put(vulnid, newExploitList);
							}
						} else {
							//logger.info("{} is not a CVE ID", vulnid);
						}
					}
				}

			}
		} catch (Exception e) {
			logger.error("Failed to open file: {}, please check if it exists!", exploitFile);
			e.printStackTrace();
		}
		logger.info("Done! Generated " + mapCveIdToExploit.size() + " CVE--> Exploit mappings!");
		return mapCveIdToExploit;
	}

}
