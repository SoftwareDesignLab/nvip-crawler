/ **
* Copyright 2021 Rochester Institute of Technology (RIT). Developed with
* government support under contract 70RCSA22C00000008 awarded by the United
* States Department of Homeland Security for Cybersecurity and Infrastructure Security Agency.
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the “Software”), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in
* all copies or substantial portions of the Software.
*
* THE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
* SOFTWARE.
* /

package edu.rit.se.nvip.db.model;

import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;

import java.sql.Timestamp;
import java.time.Clock;
import java.time.Instant;
import java.util.HashSet;
import java.util.LinkedHashSet;
import java.util.Set;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.when;

@ExtendWith(MockitoExtension.class)
class CompositeVulnerabilityTest {

    @Mock
    Clock mockClock;

    long dummyMillis;
    String dummyCveId;
    int dummyId;
    String dummyDescription;
    Timestamp dummyPub;
    Timestamp dummyMod;
    Timestamp dummyCreate;
    Timestamp dummyDescCreate;
    String dummyBuildString;

    @BeforeEach
    void initTests() {
        this.dummyCveId = "CVE-xxxx-xxx";
        this.dummyId = 1;
        this.dummyDescription = "dummy description";
        this.dummyMillis = Instant.now().toEpochMilli();
        this.dummyPub = offset(0);
        this.dummyMod = offset(3);
        this.dummyCreate = offset(2);
        this.dummyDescCreate = offset(4);
        this.dummyBuildString = "((1,2),3)";
        CompositeDescription.setClock(mockClock);
        CompositeVulnerability.setClock(mockClock);
    }

    private RawVulnerability genRawVuln(int id) {
        return new RawVulnerability(id, dummyCveId, "description"+id, offset(-id), offset(id), offset(-10), "website"+id );
    }

    private Set<RawVulnerability> genRawVulns(int size, int startId) {
        Set<RawVulnerability> out = new LinkedHashSet<>();
        for (int i = 0; i < size; i++) {
            out.add(genRawVuln(i+startId));
        }
        return out;
    }

    private CompositeDescription genCompDes(String buildString, int nSources) {
        return new CompositeDescription(dummyId, dummyCveId, dummyDescription, dummyDescCreate, buildString, genRawVulns(nSources, 1));
    }


    private CompositeVulnerability genVuln() {
        return new CompositeVulnerability(dummyCveId, dummyId, genCompDes(dummyBuildString, 3), dummyPub, dummyMod, dummyCreate);
    }
    private CompositeVulnerability genVuln(Set<RawVulnerability> rawVulns) {
        CompositeVulnerability vuln = new CompositeVulnerability(dummyCveId, dummyId, genCompDes(dummyBuildString, 3), dummyPub, dummyMod, dummyCreate);
        vuln.setPotentialSources(rawVulns);
        return vuln;
    }
    private Timestamp offset(int nHours) {
        return new Timestamp(dummyMillis + nHours*3600L*1000);
    }

    @Test
    void constructorFromFields() {
        CompositeVulnerability vuln = genVuln(genRawVulns(1, 1));
        Assertions.assertEquals(CompositeVulnerability.ReconciliationStatus.UNCHANGED, vuln.getReconciliationStatus());
        Assertions.assertEquals(dummyCveId, vuln.getCveId());
        Assertions.assertEquals(dummyDescription, vuln.getDescription());
        Assertions.assertEquals(offset(-1), vuln.getPublishDate());
        Assertions.assertEquals(offset(1), vuln.getLastModifiedDate());
        Assertions.assertEquals(dummyCreate, vuln.getCreateDate());
        Assertions.assertEquals(3, vuln.getComponents().size());
        Assertions.assertEquals(3, vuln.getSources().size());
        Assertions.assertEquals(1, vuln.getDescriptionId());
        Assertions.assertEquals("((1,2),3)", vuln.getBuildString());
        Assertions.assertEquals(dummyDescCreate, vuln.getDescriptionCreateDate());
    }

    @Test
    void constructorFromRaw() {
        when(mockClock.millis()).thenReturn(dummyMillis);

        RawVulnerability rawVuln = genRawVuln(4);
        CompositeVulnerability vuln = new CompositeVulnerability(rawVuln);
        Set<RawVulnerability> rawVulns = new HashSet<>();
        rawVulns.add(rawVuln);
        vuln.setPotentialSources(rawVulns);
        Assertions.assertEquals(CompositeVulnerability.ReconciliationStatus.NEW, vuln.getReconciliationStatus());
        Assertions.assertEquals(dummyCveId, vuln.getCveId());
        Assertions.assertEquals("description4", vuln.getDescription());
        Assertions.assertEquals(offset(-4), vuln.getPublishDate());
        Assertions.assertEquals(offset(4), vuln.getLastModifiedDate());
        Assertions.assertEquals(offset(0), vuln.getCreateDate());
        Assertions.assertEquals(1, vuln.getComponents().size());
        Assertions.assertEquals(1, vuln.getSources().size());
        Assertions.assertEquals(0, vuln.getDescriptionId());
        Assertions.assertEquals("4", vuln.getBuildString());
        Assertions.assertEquals(offset(0), vuln.getDescriptionCreateDate());
    }

    @Test
    void fromSet() {
        when(mockClock.millis()).thenReturn(dummyMillis);

        Set<RawVulnerability> rawVulns = genRawVulns(5, 1);
        CompositeVulnerability vuln = CompositeVulnerability.fromSet(rawVulns, "reconciled description");
        vuln.setPotentialSources(rawVulns);
        Assertions.assertEquals(CompositeVulnerability.ReconciliationStatus.NEW, vuln.getReconciliationStatus());
        Assertions.assertEquals(dummyCveId, vuln.getCveId());
        Assertions.assertEquals("reconciled description", vuln.getDescription());
        Assertions.assertEquals(offset(-5), vuln.getPublishDate());
        Assertions.assertEquals(offset(5), vuln.getLastModifiedDate());
        Assertions.assertEquals(offset(0), vuln.getCreateDate());
        Assertions.assertEquals(5, vuln.getComponents().size());
        Assertions.assertEquals(5, vuln.getSources().size());
        Assertions.assertEquals(0, vuln.getDescriptionId());
        Assertions.assertEquals("(1,2,3,4,5)", vuln.getBuildString());
        Assertions.assertEquals(offset(0), vuln.getDescriptionCreateDate());

    }

    @Test
    void getComponents() {
        CompositeVulnerability vuln = genVuln();
        Set<RawVulnerability> rawVulns = vuln.getComponents();
        Assertions.assertEquals(3, rawVulns.size());
    }

    @Test
    void getReconciliationStatus() {
        CompositeVulnerability vuln = genVuln();
        Assertions.assertEquals(CompositeVulnerability.ReconciliationStatus.UNCHANGED, vuln.getReconciliationStatus());
        vuln.updateSystemDescription("new description", new HashSet<>(), false);
        Assertions.assertEquals(CompositeVulnerability.ReconciliationStatus.UPDATED, vuln.getReconciliationStatus());
        vuln = genVuln();
        vuln.updateSystemDescription(dummyDescription, new HashSet<>(), false);
        Assertions.assertEquals(CompositeVulnerability.ReconciliationStatus.UNCHANGED, vuln.getReconciliationStatus());
    }

    @Test
    void getSources() {
        CompositeVulnerability vuln = genVuln();
        Set<String> sources = vuln.getSources();
        Assertions.assertEquals(3, sources.size());
        Assertions.assertTrue(sources.contains("website1"));
        Assertions.assertTrue(sources.contains("website2"));
        Assertions.assertTrue(sources.contains("website3"));
    }

    @Test
    void updateDescriptionNoResynth() {
        CompositeVulnerability vuln = genVuln();
        vuln.updateSystemDescription("updated description", genRawVulns(3, 4), false);
        Assertions.assertEquals(vuln.getReconciliationStatus(), CompositeVulnerability.ReconciliationStatus.UPDATED);
        Assertions.assertEquals("updated description", vuln.getDescription());
        Assertions.assertEquals("(((1,2),3),4,5,6)", vuln.getBuildString());
        Assertions.assertEquals(6, vuln.getComponents().size());
    }

    @Test
    void updateDescriptionResynth() {
        CompositeVulnerability vuln = genVuln();
        vuln.updateSystemDescription("updated description", genRawVulns(3, 4), true);
        Assertions.assertEquals(vuln.getReconciliationStatus(), CompositeVulnerability.ReconciliationStatus.UPDATED);
        Assertions.assertEquals("updated description", vuln.getDescription());
        Assertions.assertEquals("(1,2,3,4,5,6)", vuln.getBuildString());
        Assertions.assertEquals(6, vuln.getComponents().size());
    }

    @Test
    void updateDescriptionNoEffect() {
        CompositeVulnerability vuln = genVuln();
        vuln.updateSystemDescription(dummyDescription, new HashSet<>(), true);
        Assertions.assertEquals(CompositeVulnerability.ReconciliationStatus.UNCHANGED, vuln.getReconciliationStatus());
    }

    @Test
    void setDescriptionId() {
        CompositeVulnerability vuln = genVuln();
        vuln.setDescriptionId(10);
        Assertions.assertEquals(10, vuln.getDescriptionId());
        vuln.setDescriptionId(20);
        Assertions.assertEquals(20, vuln.getDescriptionId());
    }

    @Test
    void getDescriptionId() {
        CompositeVulnerability vuln = genVuln();
        vuln.setDescriptionId(10);
        Assertions.assertEquals(10, vuln.getDescriptionId());
        vuln.setDescriptionId(20);
        Assertions.assertEquals(20, vuln.getDescriptionId());
    }

    @Test
    void getBuildString() {
        CompositeVulnerability vuln = genVuln();
        Assertions.assertEquals(dummyBuildString, vuln.getBuildString());
        vuln.updateSystemDescription("", genRawVulns(2, 4), false);
        Assertions.assertEquals("(((1,2),3),4,5)", vuln.getBuildString());
        vuln.updateSystemDescription("", genRawVulns(5, 6), true);
        Assertions.assertEquals("(1,2,3,4,5,6,7,8,9,10)", vuln.getBuildString());
    }

    @Test
    void getDescriptionCreateDate() {

        when(mockClock.millis()).thenReturn(dummyMillis);
        CompositeVulnerability vuln = genVuln();
        Assertions.assertEquals(dummyDescCreate, vuln.getDescriptionCreateDate());

        when(mockClock.millis()).thenReturn(dummyMillis + 3600L);
        vuln.updateSystemDescription("", genRawVulns(2,4), false);
        Assertions.assertEquals(new Timestamp(dummyMillis+3600L), vuln.getDescriptionCreateDate());

        when(mockClock.millis()).thenReturn(dummyMillis+7200L);
        vuln.updateSystemDescription("", genRawVulns(4, 6), true);
        Assertions.assertEquals(new Timestamp(dummyMillis+7200L), vuln.getDescriptionCreateDate());
    }

    @Test
    void getDescription() {
        CompositeVulnerability vuln = genVuln();
        Assertions.assertEquals(dummyDescription, vuln.getDescription());
        vuln.updateSystemDescription("new description", new HashSet<>(), false);
        Assertions.assertEquals("new description", vuln.getDescription());
        vuln.updateSystemDescription("new new description", new HashSet<>(), true);
        Assertions.assertEquals("new new description", vuln.getDescription());
    }

    @Test
    void getPublishDate() {
        Set<RawVulnerability> rawVulns = genRawVulns(1, 1);
        CompositeVulnerability vuln = genVuln(rawVulns);
        vuln.setPotentialSources(rawVulns);
        Assertions.assertEquals(offset(-1), vuln.getPublishDate());

        Set<RawVulnerability> rawVulns2 = genRawVulns(1, 20);
        vuln.updateSystemDescription("", rawVulns2, false);
        vuln.setPotentialSources(rawVulns2);
        Assertions.assertEquals(offset(-20), vuln.getPublishDate());

        Set<RawVulnerability> rawVulns3 = genRawVulns(1, 10);
        vuln.updateSystemDescription("", rawVulns3, false);
        vuln.setPotentialSources(rawVulns3);
        Assertions.assertEquals(offset(-10), vuln.getPublishDate());
    }

    @Test
    void getLastModifiedDate() {
        Set<RawVulnerability> rawVulns = genRawVulns(1, 1);
        CompositeVulnerability vuln = genVuln(rawVulns);
        vuln.setPotentialSources(rawVulns);
        Assertions.assertEquals(offset(1), vuln.getLastModifiedDate());

        Set<RawVulnerability> rawVulns2 = genRawVulns(1, 20);
        vuln.updateSystemDescription("", rawVulns2, false);
        vuln.setPotentialSources(rawVulns2);
        Assertions.assertEquals(offset(20), vuln.getLastModifiedDate());

        Set<RawVulnerability> rawVulns3 = genRawVulns(1, 10);
        vuln.updateSystemDescription("", rawVulns3, false);
        vuln.setPotentialSources(rawVulns3);
        Assertions.assertEquals(offset(10), vuln.getLastModifiedDate());
    }
}