/ **
* Copyright 2021 Rochester Institute of Technology (RIT). Developed with
* government support under contract 70RCSA22C00000008 awarded by the United
* States Department of Homeland Security for Cybersecurity and Infrastructure Security Agency.
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the “Software”), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in
* all copies or substantial portions of the Software.
*
* THE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
* SOFTWARE.
* /

package edu.rit.se.nvip.db.model;

import org.junit.Assert;
import org.junit.Test;

import java.sql.Timestamp;
import java.util.ArrayList;

import static org.junit.Assert.assertEquals;
import static org.junit.jupiter.api.Assertions.*;

public class NvdVulnerabilityTest {

    /**
     * Tests to make sure that each Nvd Vulnerability properly is assigned the right NvdStatus
     */
    @Test
    public void testNvdVulnReceived() {

        NvdVulnerability testVuln = new NvdVulnerability("CVE-Test", Timestamp.valueOf("2023-05-20 00:00:00"),"Received", new ArrayList<>());
        Assert.assertEquals("CVE-Test", testVuln.getCveId());
        Assert.assertEquals(Timestamp.valueOf("2023-05-20 00:00:00"), testVuln.getPublishDate());
        assertEquals(NvdVulnerability.NvdStatus.RECEIVED, testVuln.getStatus());
    }

    @Test
    public void testNvdVulnUndergoingAnalysis() {
        NvdVulnerability testVuln = new NvdVulnerability("CVE-Test",  Timestamp.valueOf("2023-05-20 00:00:00"),"Undergoing Analysis", new ArrayList<>());
        assertEquals(NvdVulnerability.NvdStatus.UNDERGOING_ANALYSIS, testVuln.getStatus());
    }

    @Test
    public void testNvdVulnAwaitingAnalysis() {
        NvdVulnerability testVuln = new NvdVulnerability("CVE-Test",  Timestamp.valueOf("2023-05-20 00:00:00"), "Awaiting Analysis", new ArrayList<>());
        assertEquals(NvdVulnerability.NvdStatus.AWAITING_ANALYSIS, testVuln.getStatus());
    }

    @Test
    public void testNvdVulnAnalyzed() {
        NvdVulnerability testVuln = new NvdVulnerability("CVE-Test",  Timestamp.valueOf("2023-05-20 00:00:00"), "Analyzed", new ArrayList<>());
        assertEquals(NvdVulnerability.NvdStatus.ANALYZED, testVuln.getStatus());
    }

    @Test
    public void testNvdVulnNotInNvd() {
        NvdVulnerability testVuln = new NvdVulnerability("CVE-Test",  Timestamp.valueOf("2023-05-20 00:00:00"),"nostatus", new ArrayList<>());
        assertEquals(NvdVulnerability.NvdStatus.NOT_IN_NVD, testVuln.getStatus());
    }
}