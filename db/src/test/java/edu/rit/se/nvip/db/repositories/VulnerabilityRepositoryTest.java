package edu.rit.se.nvip.db.repositories;

import edu.rit.se.nvip.db.model.Vulnerability;
import lombok.SneakyThrows;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;

import javax.sql.DataSource;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.util.Map;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;


@ExtendWith(MockitoExtension.class)
public class VulnerabilityRepositoryTest {

    @Mock DataSource dataSource;
    @Mock Connection mockConnection;
    @Mock PreparedStatement mockPS;
    @Mock ResultSet mockRS;

    VulnerabilityRepository repository;

    @SneakyThrows
    @BeforeEach
    void initializeMocks(){
        when(mockPS.executeQuery()).thenReturn(mockRS);
        when(mockConnection.prepareStatement(anyString())).thenReturn(mockPS);
        when(dataSource.getConnection()).thenReturn(mockConnection);

        repository = new VulnerabilityRepository(dataSource);
    }

    @SneakyThrows
    @Test
    void testGetExistingVulnerabilitiesWithNoCachedVulnerabilities() {
        Vulnerability expectedVuln = new Vulnerability(1, "CVE-1234-5678", "CVE", 0, 0, "Today");

        when(mockRS.next()).thenReturn(true, false);
        when(mockRS.getInt("vuln_id")).thenReturn(expectedVuln.getVulnID());
        when(mockRS.getString("cve_id")).thenReturn(expectedVuln.getCveId());
        when(mockRS.getString("description")).thenReturn(expectedVuln.getDescription());
        when(mockRS.getString("created_date")).thenReturn(expectedVuln.getCreateDate());
        when(mockRS.getInt("exists_at_nvd")).thenReturn(expectedVuln.getNvdStatus());
        when(mockRS.getInt("exists_at_mitre")).thenReturn(expectedVuln.getMitreStatus());

        Map<String, Vulnerability> vulns = repository.getExistingVulnerabilities();

        assertTrue(vulns.containsKey(expectedVuln.getCveId()));
        assertEquals(vulns.get(expectedVuln.getCveId()), expectedVuln);
    }

    @SneakyThrows
    @Test
    void testGetExistingVulnerabilitiesWithCachedVulnerabilities() {
        when(mockRS.next()).thenReturn(false);

        Map<String, Vulnerability> vulns = repository.getExistingVulnerabilities();

        assertEquals(0, vulns.size());
    }

    @SneakyThrows
    @Test
    void testGetCveIdNotFoundReturnsEmptyString() {
        String expectedId = "";

        when(mockRS.next()).thenReturn(false);

        String cveId = repository.getCveId("1");

        assertEquals(expectedId, cveId);
    }

    @SneakyThrows
    @Test
    void testGetCveIdReturnsCveIdWhenFound() {
        String expectedId = "CVE_1234_5678";

        when(mockRS.next()).thenReturn(true);
        when(mockRS.getString("cve_id")).thenReturn(expectedId);

        String cveId = repository.getCveId("1");

        assertEquals(expectedId, cveId);
    }
}
