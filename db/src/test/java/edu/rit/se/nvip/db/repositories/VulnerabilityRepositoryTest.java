package edu.rit.se.nvip.db.repositories;

import edu.rit.se.nvip.db.model.Vulnerability;
import lombok.SneakyThrows;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;

import javax.sql.DataSource;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.util.Map;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;


@ExtendWith(MockitoExtension.class)
public class VulnerabilityRepositoryTest {

    @Mock DataSource dataSource;
    @Mock Connection mockConnection;
    @Mock PreparedStatement mockPS;
    @Mock ResultSet mockRS;

    VulnerabilityRepository repository;

    @SneakyThrows
    @BeforeEach
    void initializeMocks(){
        when(mockPS.executeQuery()).thenReturn(mockRS);
        when(mockConnection.prepareStatement(anyString())).thenReturn(mockPS);
        when(dataSource.getConnection()).thenReturn(mockConnection);

        repository = new VulnerabilityRepository(dataSource);
    }
    
    @SneakyThrows
    @Test
    void testGetCveIdNotFoundReturnsEmptyString() {
        String expectedId = "";

        when(mockRS.next()).thenReturn(false);

        String cveId = repository.getCveId("1");

        assertEquals(expectedId, cveId);
    }

    @SneakyThrows
    @Test
    void testGetCveIdReturnsCveIdWhenFound() {
        String expectedId = "CVE_1234_5678";

        when(mockRS.next()).thenReturn(true);
        when(mockRS.getString("cve_id")).thenReturn(expectedId);

        String cveId = repository.getCveId("1");

        assertEquals(expectedId, cveId);
    }
}
