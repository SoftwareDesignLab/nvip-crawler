/**
 * Copyright 2023 Rochester Institute of Technology (RIT). Developed with
 * government support under contract 70RCSA22C00000008 awarded by the United
 * States Department of Homeland Security for Cybersecurity and Infrastructure Security Agency.
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
package edu.rit.se.nvip.db.model;

import lombok.Data;
import lombok.EqualsAndHashCode;

import java.text.DecimalFormat;
import java.text.NumberFormat;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;

/**
 * 
 * Vulnerability entity
 * 
 * @author axoeec
 *
 */
@EqualsAndHashCode
public class Vulnerability {

	@EqualsAndHashCode.Exclude
	protected final NumberFormat formatter = new DecimalFormat("#0.00");
	@EqualsAndHashCode.Exclude
	protected final DateTimeFormatter dateTimeFormatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");

	protected int vulnID = 0;
	protected String cveId = null; // CVE ID
	protected String description = null; // CVE description text
	protected String platform = null; // Related platform/program and version info
	protected String patch = null; // Link to patch
	protected String publishDate = null; // The date time it is published
	protected String createDate = null; // The time the entry is created at NVIP DB
	protected String lastModifiedDate = null; // The most recent crawl date
	protected String fixDate = null; // The time the vulnerability was fixed (a patch published?)

	// 0 means not in ndv/mitre, 1 means it exists in nvd/mitre
	protected int statusNvd = 0; // this CVE-ID exists in NVD feeds?
	protected int statusMitre = 0;// this CVE-ID exists in MITRE feeds?

	/**
	 * The time gap (hours) between the time NVIP has crawled this and the time it
	 * was available at Nvd/Mitre
	 */
	protected int timeGapNvd = 0;
	protected int timeGapMitre = 0;

	/**
	 * CVE is reserved/rejected etc. in MITRE, but nvip crawlers found new
	 * description for it! By default, the value is false.
	 */
	protected boolean foundNewDescriptionForReservedCve = false;

	public Vulnerability() {}

	/**
	 * For comparing w/ NVD
	 * @param cveId
	 * @param publishDate
	 */
	public Vulnerability(String cveId, String publishDate, String lastModifiedDate) {
		this.cveId = cveId;
		this.publishDate = publishDate;
		this.lastModifiedDate = lastModifiedDate;
	}

	/**
	 * Constructor for vulnerability updates
	 * 
	 * @param vuln_id
	 * @param description
	 * @param existAtNvd
	 * @param existAtMitre
	 * @param createdDate
	 */
	public Vulnerability(int vuln_id, String cveId, String description, int existAtNvd, int existAtMitre, String createdDate) {
		this.vulnID = vuln_id;
		this.description = description;
		this.cveId = cveId;
		this.statusNvd = existAtNvd;
		this.statusMitre = existAtMitre;
		if (createdDate != null) {
			this.createDate = createdDate;
		} else {
			this.createDate = LocalDateTime.now().format(dateTimeFormatter);
		}

	}

	public int getVulnID() {
		return vulnID;
	}

	public String getCveId() {
		return cveId;
	}

	public void setCVEID(String cveID) {
		this.cveId = cveID;
	}

	public String getPlatform() {
		return platform;
	}

	public void setPlatform(String platform) {
		this.platform = platform;
	}

	public String getPublishDate() {
		return publishDate == null || "".equals(publishDate) ? getCreateDate() : publishDate;
	}
	public LocalDateTime getPublishDateAsDate() {
		return LocalDateTime.parse(this.publishDate, dateTimeFormatter);
	}

	public void setPublishDate(String publishDate) {
		this.publishDate = publishDate;
	}


	public String getLastModifiedDate() { return lastModifiedDate; }

	public LocalDateTime getLastModifiedDateAsDate() {
		return LocalDateTime.parse(this.lastModifiedDate, dateTimeFormatter);
	}

	public void setLastModifiedDate(String lastModifiedDate) {
		this.lastModifiedDate = lastModifiedDate;
	}

	public String getDescription() {
		return description;
	}

	public void setDescription(String description) {
		this.description = description;
	}

	public boolean doesExistInNvd() {
		return statusNvd > 0;
	}

	public boolean doesExistInMitre() {
		return statusMitre > 0;
	}

	public void setCveId(String cveId) {
		this.cveId = cveId;
	}

	public String getPatch() {
		return patch;
	}

	public String getCreateDate() { return createDate; }

	public LocalDateTime getCreatedDateAsDate() {
		return LocalDateTime.parse(this.createDate, dateTimeFormatter);
	}

	public String getFixDate() {
		return fixDate;
	}

	public int getTimeGapNvd() {
		return timeGapNvd;
	}

	public int getTimeGapMitre() {
		return timeGapMitre;
	}

	public int getNvdStatus() {
		return statusNvd;
	}

	public int getMitreStatus() {
		return statusMitre;
	}

}
