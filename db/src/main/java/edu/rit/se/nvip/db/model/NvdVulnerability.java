/**
* Copyright 2021 Rochester Institute of Technology (RIT). Developed with
* government support under contract 70RCSA22C00000008 awarded by the United
* States Department of Homeland Security for Cybersecurity and Infrastructure Security Agency.
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the “Software”), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in
* all copies or substantial portions of the Software.
*
* THE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
* SOFTWARE.
*/

package edu.rit.se.nvip.db.model;

import lombok.Getter;

import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

public class NvdVulnerability {
    @Getter
    private String cveId;
    @Getter
    private Timestamp publishDate;

    /**
     * 5 main status types to track
     *
     * Analyzed --> CVE is fully analyzed and is in NVD
     * Awaiting Analysis --> CVE is in NVD< but not yet started analysis yet
     * Undergoing Analysis --> CVE is in NVD and is currently being analyzed
     * Received --> No analysis, NVD just received the CVE and is in their backlog
     * Not in NVD --> CVE is not in NVD at all, in which the CVE wasn't returned when pulling NVD CVEs
     */

    @Getter
    private NvdStatus status;
    @Getter
    private List<String> sourceUrls;

    public enum NvdStatus {
        ANALYZED("Analyzed"),
        AWAITING_ANALYSIS("Awaiting Analysis"),
        UNDERGOING_ANALYSIS("Undergoing Analysis"),
        RECEIVED("Received"),
        NOT_IN_NVD("Not in NVD");

        public final String status;
        NvdStatus(String status) {
            this.status = status;
        }
        @Override
        public String toString() {
            return this.status;
        }
        public static NvdStatus get(String status) {
            return Arrays.stream(NvdStatus.values()).filter(n->n.status.equals(status)).findFirst().orElse(NOT_IN_NVD);
        }
    }

    public NvdVulnerability(String cveID, Timestamp publishDate, String status, List<String> sourceUrls) {
        this.cveId = cveID;
        this.publishDate = publishDate;
        this.status = NvdStatus.get(status);
        this.sourceUrls = sourceUrls;
    }

    @Override
    public String toString() {
        return this.cveId + " || " + this.publishDate + " || " + status;
    }

    public boolean inNvd() {
        return this.status == NvdStatus.ANALYZED; // this may be changed to include other statuses
    }

}
