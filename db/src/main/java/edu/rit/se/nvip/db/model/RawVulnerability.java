/**
 * Copyright 2023 Rochester Institute of Technology (RIT). Developed with
 * government support under contract 70RSAT19CB0000020 awarded by the United
 * States Department of Homeland Security.
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
package edu.rit.se.nvip.db.model;

import lombok.Getter;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

import java.net.MalformedURLException;
import java.net.URL;
import java.sql.Timestamp;
import java.time.*;
import java.time.format.DateTimeFormatter;
import java.time.format.DateTimeFormatterBuilder;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

/**
 * Extends base Vulnerability model class to store raw info
 */
public class RawVulnerability {

	private static final Logger logger = LogManager.getLogger(RawVulnerability.class);
	public enum SourceType {
		CNA("cna"),
		SA("security_advisory"),
		THIRD_PARTY("third_party"),
		BUG_BOUNTY("bug_bounty"),
		USER("user"),
		OTHER("other");

		public final String type;
		SourceType(String label) {
			this.type = label;
		}
		public String getType() {
			return this.type;
		}
		public static SourceType get(String sourceType) {
			return Arrays.stream(SourceType.values()).filter(st -> st.type.equals(sourceType)).findFirst().orElse(OTHER);
		}
	}

	public enum FilterStatus {
		NEW(0),
		UNEVALUATED(1),
		PASSED(2),
		FAILED(3);
		public final int value;
		FilterStatus(int value) {
			this.value = value;
		}
		public static FilterStatus get(int value) {
			return Arrays.stream(FilterStatus.values()).filter(v -> v.value == value).findFirst().orElse(FAILED);
		}
	}

	@Getter
	private int id;
	@Getter
	private String cveId;
	@Getter
	private String description;
	@Getter
	private Timestamp publishDate;
	@Getter
	private Timestamp lastModifiedDate;
	@Getter
	private Timestamp createDate;
	@Getter
	private String sourceUrl;
	@Getter
	private SourceType sourceType;
	@Getter
	private FilterStatus filterStatus;
	@Getter
	private String parserType = null;

	/**
	 * dummy constructor for testing
	 * @param id
	 * @param cveID
	 */
	public RawVulnerability(int id, String cveID) {
		this.id = id;
		this.cveId = cveID;
		this.publishDate = Timestamp.valueOf(LocalDateTime.now());
		this.lastModifiedDate = Timestamp.valueOf(LocalDateTime.now());
		this.description = "";
	}

	/**
	 * Vulnerability Constructor
	 *
	 * @param sourceUrl
	 * @param cveID
	 * @param publishDate
	 * @param lastModifiedDate
	 * @param description
	 */
	public RawVulnerability(String sourceUrl, String cveID, String publishDate, String lastModifiedDate, String description, String parserType) {
		this.cveId = cveID;
		this.sourceUrl = sourceUrl;
		this.publishDate = parsePubDate(publishDate);
		this.lastModifiedDate = parseLastModDate(lastModifiedDate);
		this.description = description;
		this.createDate = Timestamp.valueOf(LocalDateTime.now());
		this.parserType = parserType;
	}

	public RawVulnerability(int id, String cveId, String description, Timestamp publishDate, Timestamp lastModifiedDate, Timestamp createDate, String sourceUrl, String sourceType, int filterStatus) {
		this.id = id;
		this.cveId = cveId;
		this.description = description;
		this.publishDate = publishDate;
		this.lastModifiedDate = lastModifiedDate;
		this.createDate = createDate;
		this.sourceUrl = sourceUrl;
		this.sourceType = SourceType.get(sourceType);
		this.filterStatus = FilterStatus.get(filterStatus);
	}


	/**
	 * For formatting inputted dates to mysql dates
	 * @return
	 */
	public String formatDate(String dateString) {

		DateTimeFormatter sqlFormat = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");

		// Prepare 2 lists of formatters, one for datetime, the other for just dates
		List<DateTimeFormatter> formatters = new ArrayList<>();
		formatters.add(new DateTimeFormatterBuilder().parseCaseInsensitive().appendPattern("yyyy-MM-dd'T'HH:mm:ss.SSSSSS'Z'").toFormatter());
		formatters.add(new DateTimeFormatterBuilder().parseCaseInsensitive().appendPattern("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'").toFormatter());
		formatters.add(new DateTimeFormatterBuilder().parseCaseInsensitive().appendPattern("yyyy-MM-dd'T'HH:mm:ss'Z'").toFormatter());
		formatters.add(new DateTimeFormatterBuilder().parseCaseInsensitive().appendPattern("yyyy-MM-dd'T'HH:mm:ss").toFormatter());
		formatters.add(new DateTimeFormatterBuilder().parseCaseInsensitive().appendPattern("yyyy-MM-dd'T'hh:mm").toFormatter());
		formatters.add(new DateTimeFormatterBuilder().parseCaseInsensitive().appendPattern("yyyy-MM-dd'T'HH:mm").toFormatter());
		formatters.add(new DateTimeFormatterBuilder().parseCaseInsensitive().appendPattern("MMM d, yyyy, H:mm a z").toFormatter());
		formatters.add(new DateTimeFormatterBuilder().parseCaseInsensitive().appendPattern("MMM d, yyyy, h:mm a z").toFormatter());
		formatters.add(new DateTimeFormatterBuilder().parseCaseInsensitive().appendPattern("MMM dd, yyyy, h:mm a z").toFormatter());
		formatters.add(new DateTimeFormatterBuilder().parseCaseInsensitive().appendPattern("MMM dd, yyyy hh:mm:ss a z").toFormatter());
		formatters.add(new DateTimeFormatterBuilder().parseCaseInsensitive().appendPattern("yyyy/MM/dd HH:mm:ss").toFormatter());
		formatters.add(new DateTimeFormatterBuilder().parseCaseInsensitive().appendPattern("MM/dd/yyyy HH:mm:ss").toFormatter());
		formatters.add(new DateTimeFormatterBuilder().parseCaseInsensitive().appendPattern("yyyy-MM-dd HH:mm:ss").toFormatter());
		formatters.add(new DateTimeFormatterBuilder().parseCaseInsensitive().appendPattern("dd MMM yyyy HH:mm a z").toFormatter());
		formatters.add(new DateTimeFormatterBuilder().parseCaseInsensitive().appendPattern("dd MMM yyyy HH a z").toFormatter());
		formatters.add(new DateTimeFormatterBuilder().parseCaseInsensitive().appendPattern("yyyy-MM-dd HH:mm z").toFormatter());
		formatters.add(new DateTimeFormatterBuilder().parseCaseInsensitive().appendPattern("MMM d, yyyy HH:mm:ss a").toFormatter());
		formatters.add(new DateTimeFormatterBuilder().parseCaseInsensitive().appendPattern("MMM d, yyyy, HH:mm:ss a").toFormatter());
		formatters.add(new DateTimeFormatterBuilder().parseCaseInsensitive().appendPattern("MMM dd, yyyy HH:mm:ss a").toFormatter());
		formatters.add(new DateTimeFormatterBuilder().parseCaseInsensitive().appendPattern("MMM dd, yyyy, HH:mm:ss a").toFormatter());
		formatters.add(new DateTimeFormatterBuilder().parseCaseInsensitive().appendPattern("EEE MMM dd HH:mm:ss z yyyy").toFormatter());

		List<DateTimeFormatter> formattersNoTime = new ArrayList<>();

		formattersNoTime.add(new DateTimeFormatterBuilder().parseCaseInsensitive().appendPattern("MMM dd, yyyy").toFormatter());
		formattersNoTime.add(new DateTimeFormatterBuilder().parseCaseInsensitive().appendPattern("MMM d, yyyy").toFormatter());
		formattersNoTime.add(new DateTimeFormatterBuilder().parseCaseInsensitive().appendPattern("MMM dd yyyy").toFormatter());
		formattersNoTime.add(new DateTimeFormatterBuilder().parseCaseInsensitive().appendPattern("MMM d yyyy").toFormatter());
		formattersNoTime.add(new DateTimeFormatterBuilder().parseCaseInsensitive().appendPattern("MMMM dd, yyyy").toFormatter());
		formattersNoTime.add(new DateTimeFormatterBuilder().parseCaseInsensitive().appendPattern("MMMM d, yyyy").toFormatter());
		formattersNoTime.add(new DateTimeFormatterBuilder().parseCaseInsensitive().appendPattern("MMMM dd yyyy").toFormatter());
		formattersNoTime.add(new DateTimeFormatterBuilder().parseCaseInsensitive().appendPattern("MMMM d yyyy").toFormatter());
		formattersNoTime.add(new DateTimeFormatterBuilder().parseCaseInsensitive().appendPattern("MMMM dd['th']['st']['nd']['rd'] yyyy").toFormatter());
		formattersNoTime.add(new DateTimeFormatterBuilder().parseCaseInsensitive().appendPattern("MMMM d['th']['st']['nd']['rd'] yyyy").toFormatter());
		formattersNoTime.add(new DateTimeFormatterBuilder().parseCaseInsensitive().appendPattern("MMMM dd['th']['st']['nd']['rd'], yyyy").toFormatter());
		formattersNoTime.add(new DateTimeFormatterBuilder().parseCaseInsensitive().appendPattern("MMMM d['th']['st']['nd']['rd'], yyyy").toFormatter());
		formattersNoTime.add(new DateTimeFormatterBuilder().parseCaseInsensitive().appendPattern("MMM dd['th']['st']['nd']['rd'], yyyy").toFormatter());
		formattersNoTime.add(new DateTimeFormatterBuilder().parseCaseInsensitive().appendPattern("MMM d['th']['st']['nd']['rd'], yyyy").toFormatter());
		formattersNoTime.add(new DateTimeFormatterBuilder().parseCaseInsensitive().appendPattern("MMM dd['th']['st']['nd']['rd'] yyyy").toFormatter());
		formattersNoTime.add(new DateTimeFormatterBuilder().parseCaseInsensitive().appendPattern("MMM d['th']['st']['nd']['rd'] yyyy").toFormatter());
		formattersNoTime.add(new DateTimeFormatterBuilder().parseCaseInsensitive().appendPattern("MM/dd/yyyy").toFormatter());
		formattersNoTime.add(new DateTimeFormatterBuilder().parseCaseInsensitive().appendPattern("M/dd/yyyy").toFormatter());
		formattersNoTime.add(new DateTimeFormatterBuilder().parseCaseInsensitive().appendPattern("MM/d/yyyy").toFormatter());
		formattersNoTime.add(new DateTimeFormatterBuilder().parseCaseInsensitive().appendPattern("M/d/yyyy").toFormatter());
		formattersNoTime.add(new DateTimeFormatterBuilder().parseCaseInsensitive().appendPattern("yyyy/MM/dd").toFormatter());
		formattersNoTime.add(new DateTimeFormatterBuilder().parseCaseInsensitive().appendPattern("yyyy-MM-dd").toFormatter());
		formattersNoTime.add(new DateTimeFormatterBuilder().parseCaseInsensitive().appendPattern("yyyy-MMM-dd").toFormatter());
		formattersNoTime.add(new DateTimeFormatterBuilder().parseCaseInsensitive().appendPattern("MM-dd-yyyy").toFormatter());
		formattersNoTime.add(new DateTimeFormatterBuilder().parseCaseInsensitive().appendPattern("MM dd yyyy").toFormatter());
		formattersNoTime.add(new DateTimeFormatterBuilder().parseCaseInsensitive().appendPattern("dd MMM yyyy").toFormatter());
		formattersNoTime.add(new DateTimeFormatterBuilder().parseCaseInsensitive().appendPattern("d MMM yyyy").toFormatter());
		formattersNoTime.add(new DateTimeFormatterBuilder().parseCaseInsensitive().appendPattern("dd MMMM yyyy").toFormatter());
		formattersNoTime.add(new DateTimeFormatterBuilder().parseCaseInsensitive().appendPattern("d MMMM yyyy").toFormatter());
		formattersNoTime.add(new DateTimeFormatterBuilder().parseCaseInsensitive().appendPattern("dd-MMM-yy").toFormatter());
		formattersNoTime.add(new DateTimeFormatterBuilder().parseCaseInsensitive().appendPattern("dd-MM-yyyy").toFormatter());
		formattersNoTime.add(new DateTimeFormatterBuilder().parseCaseInsensitive().appendPattern("dd.MM.yyyy").toFormatter());
		formattersNoTime.add(new DateTimeFormatterBuilder().parseCaseInsensitive().appendPattern("d.MM.yyyy").toFormatter());
		formattersNoTime.add(new DateTimeFormatterBuilder().parseCaseInsensitive().appendPattern("dd.M.yyyy").toFormatter());
		formattersNoTime.add(new DateTimeFormatterBuilder().parseCaseInsensitive().appendPattern("d.M.yyyy").toFormatter());


		DateTimeFormatter monthYear = new DateTimeFormatterBuilder().parseCaseInsensitive().appendPattern("MMMM yyyy").toFormatter();

		// For each datetime formatter, check if the format matches what was inputted
		// If true, format that inputted date to yyyy-MM-dd HH:mm:ss to make it mySQL acceptable
		for (DateTimeFormatter formatter: formatters) {
			try {
				// Take a try
				return LocalDateTime.parse(dateString, formatter).format(sqlFormat);
			} catch (Exception e) {
				//logger.error("ERROR: Failed to parse date {} with format {}\n{}", dateString, formatter.toString(), e);
			}
		}

		// Same for Date formatters, time will be 00:00:00 by default
		for (DateTimeFormatter formatterNoTime : formattersNoTime) {
			try {
				// Take a try
				LocalDate date = LocalDate.parse(dateString, formatterNoTime);
				return LocalDateTime.of(date, LocalTime.MIDNIGHT).format(sqlFormat);
			} catch (Exception e) {
				//logger.error("ERROR: Failed to parse date {} with format {}\n{}", dateString, formatterNoTime.toString(), e);
			}
		}

		// Check if it's just month and year format
		try {
			// Take a try
			LocalDate date = YearMonth.parse(dateString, monthYear).atDay(1);
			return date.atStartOfDay().format(sqlFormat);
		} catch (Exception e) {
			//logger.error("ERROR: Failed to parse date {} with format {}\n{}", dateString, monthYear.toString(), e);
		}

		// Fall through - return empty string
		return "";
//		return LocalDateTime.now().format(sqlFormat);
//		return dateString;
	}

	// if we have a faulty publish date string, default to created date (now)
	private Timestamp parsePubDate(String dateTime) {
		try {
			return Timestamp.valueOf(formatDate(dateTime));
		} catch (IllegalArgumentException ex) {
			return Timestamp.valueOf(LocalDateTime.now());
		}
	}

	// if we have a faulty last modified date string, default to null
	private Timestamp parseLastModDate(String dateTime) {
		try {
			return Timestamp.valueOf(formatDate(dateTime));
		} catch (IllegalArgumentException ex) {
			return null;
		}
	}

	public void setDescription(String description) {
		this.description = description;
	}

	public void setSourceType(SourceType sourceType) {
		this.sourceType = sourceType;
	}
	public void setSourceType(String sourceType) {
		this.sourceType = SourceType.get(sourceType);
	}

	public void setParserType(String parserType) {
		this.parserType = parserType;
	}

	public String getDomain() {
		try {
			URL url = new URL(this.sourceUrl);
			return url.getHost();
		} catch (MalformedURLException ex) {
			return null;
		}
	}

	public String getIdString() {
		return String.valueOf(this.id);
	}

	public boolean isHighPriority() {
		return this.sourceType == SourceType.CNA || this.sourceType == SourceType.SA || this.sourceType == SourceType.USER;
	}
}
