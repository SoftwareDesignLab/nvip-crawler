DROP FUNCTION IF EXISTS get_non_null_date;

DELIMITER //
CREATE FUNCTION get_non_null_date(firstchoice VARCHAR(20), secondchoice VARCHAR(20), thirdchoice VARCHAR(20)) 
RETURNS DATETIME
DETERMINISTIC
BEGIN
	IF firstchoice IS NOT NULL AND firstchoice != '0000-00-00 00:00:00' THEN RETURN CAST(firstchoice AS DATE);
    ELSEIF secondchoice IS NOT NULL AND secondchoice != '0000-00-00 00:00:00' THEN RETURN CAST(secondchoice AS DATE);
    ELSEIF thirdchoice IS NOT NULL AND thirdchoice != '0000-00-00 00:00:00' THEN RETURN CAST(thirdchoice AS DATE);
    ELSE RETURN NOW();
    END IF;
END//

DELIMITER ;

/* Inserts into rawdescription for each vulnsourceurl entry in the old schema*/
INSERT INTO nvip2.rawdescription (raw_description, cve_id, created_date, published_date, last_modified_date, source_url, is_garbage)
SELECT v.description, v.cve_id, get_non_null_date(CAST(v.created_date AS CHAR), CAST(v.published_date AS CHAR), CAST(v.last_modified_date AS CHAR)),
	get_non_null_date(CAST(v.published_date AS CHAR), CAST(v.created_date AS CHAR), CAST(v.last_modified_date AS CHAR)),
    get_non_null_date(CAST(v.last_modified_date AS CHAR), CAST(v.published_date AS CHAR), CAST(v.created_date AS CHAR)), s.url, 2
FROM nvip_old.vulnerability AS v 
INNER JOIN nvip_old.vulnsourceurl AS s ON v.cve_id = s.cve_id;

/* There are a handful of malformed cve ids in the old vulnerability table, and all appear 29 times in that old vuln table along with 29 (identical) vulnsource entries.*/
/* That means that after the previous insert, there are 29*29 rows in the rawdescription table for each of those cve ids. This removes all but 1 for each.*/
DELETE rd
FROM nvip2.rawdescription AS rd
JOIN (
	SELECT min(nvip2.rawdescription.raw_description_id) AS min_id, cve_id
    FROM nvip2.rawdescription
    WHERE cve_id like '%;%' OR cve_id like '%(%'
    GROUP BY cve_id
    HAVING COUNT(*) > 1
) AS t2 ON rd.cve_id = t2.cve_id AND rd.raw_description_id <> t2.min_id;


/* There's also another cve with 2 entries, one with a whitespace character at the end of its id. Weird sql whitespace handling makes this look funky*/
DELETE FROM nvip2.rawdescription WHERE cve_id LIKE 'CVE-2020-12713 ' AND cve_id NOT LIKE 'CVE-2020-12713';

/* There are about 40k old.vulnerability rows without associated sources. This creates dummy sources to support them in the new schema*/
INSERT INTO nvip2.rawdescription (raw_description, cve_id, created_date, published_date, last_modified_date, source_url, is_garbage, source_type)
SELECT v.description, v.cve_id, get_non_null_date(CAST(v.created_date AS CHAR), CAST(v.published_date AS CHAR), CAST(v.last_modified_date AS CHAR)),
	get_non_null_date(CAST(v.published_date AS CHAR), CAST(v.created_date AS CHAR), CAST(v.last_modified_date AS CHAR)),
    get_non_null_date(CAST(v.last_modified_date AS CHAR), CAST(v.published_date AS CHAR), CAST(v.created_date AS CHAR)),
    '', 2, 'sourceless'
FROM nvip_old.vulnerability AS v
LEFT JOIN nvip_old.vulnsourceurl AS vs ON v.cve_id = vs.cve_id
WHERE vs.cve_id IS NULL;

SET SESSION group_concat_max_len = 100000;

/* Inserts into the description table 1 for every cve id in rawdescription*/
INSERT INTO nvip2.description (description, created_date, gpt_func, cve_id)
SELECT MAX(r.raw_description), NOW(), CONCAT('(', GROUP_CONCAT(r.raw_description_id SEPARATOR ','), ')'), r.cve_id
FROM nvip2.rawdescription AS r
GROUP BY r.cve_id;

/* Populates rawdescriptionjt with one mapping for every rawdescription */
INSERT INTO nvip2.rawdescriptionjt (raw_description_id, description_id)
SELECT r.raw_description_id, d.description_id
FROM nvip2.rawdescription AS r
INNER JOIN nvip2.description AS d ON r.cve_id = d.cve_id;

/* Populates vulnerability with one entry for each description */
/* pub date is earliest raw pub date, last mod is latest raw last mod date, created date is earliest raw create date*/
INSERT INTO vulnerability (cve_id, description_id, created_date, published_date, last_modified_date)
SELECT d.cve_id, MAX(d.description_id), MIN(r.created_date), MIN(r.published_date), MAX(r.last_modified_date)
FROM nvip2.description AS d
JOIN nvip2.rawdescriptionjt AS jt ON d.description_id = jt.description_id
JOIN nvip2.rawdescription AS r ON jt.raw_description_id = r.raw_description_id
GROUP BY d.cve_id;

DROP FUNCTION get_non_null_date;