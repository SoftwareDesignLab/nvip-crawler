/**
 * Copyright 2023 Rochester Institute of Technology (RIT). Developed with
 * government support under contract 70RSAT19CB0000020 awarded by the United
 * States Department of Homeland Security.
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
package edu.rit.se.nvip.model;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.LocalTime;
import java.time.YearMonth;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.List;

/**
 * Extends base Vulnerability model class to store raw info
 */
public class RawVulnerability extends Vulnerability {

	private static final Logger logger = LogManager.getLogger(RawVulnerability.class);

	/**
	 * reconcile status
	 */
	public enum CveReconcileStatus {
		DO_NOT_CHANGE, UPDATE, INSERT;
	}

	/**
	 * Used for tagging
	 */
	private String nvdSearchResult = ""; // the note string the Nvip associated to this CVE
	private String mitreSearchResult = ""; // the note string the Nvip associated to this CVE
	private String nvipNote = ""; // comments added by Nvip

	/**
	 * related objects
	 */
	// the source URL list (where we found this vulnerability): Does not allow
	// duplicates!
	private String sourceURL;

	// characterized VDO label(s)
	private final List<VdoCharacteristic> vdoCharacteristic = new ArrayList<>();

	// cvss scoring
	private final List<CvssScore> cvssSCore = new ArrayList<>();

	CveReconcileStatus cveReconcileStatus = CveReconcileStatus.DO_NOT_CHANGE;

	private String sourceDomainName;

	public RawVulnerability(int vulnID, String cveID) {
		super();
		this.vulnID = vulnID;
		this.cveId = cveID;
		this.platform = "";
		this.publishDate = String.valueOf(LocalDateTime.now());
		this.lastModifiedDate = String.valueOf(LocalDateTime.now());
		this.description = "";
		this.sourceDomainName = "sourceDomainName";
	}

	/**
	 * Vulnerability Constructor
	 *
	 * @param sourceURL
	 * @param cveID
	 * @param publishDate
	 * @param lastModifiedDate
	 * @param description
	 */
	public RawVulnerability(String sourceURL, String cveID, String publishDate, String lastModifiedDate, String description) {
		super();
		this.cveId = cveID;
		this.sourceURL = sourceURL;
		this.publishDate = formatDate(publishDate);
		this.lastModifiedDate = formatDate(lastModifiedDate);
		this.description = description;
		this.createDate = LocalDateTime.now().format(dateTimeFormatter);
	}

	/**
	 * return list of source urls
	 *
	 */
	public String getSourceURL() { return sourceURL; }

	public String getCveId() {
		return cveId;
	}

	public String getDescription() {
		return description;
	}

	/**
	 * For formatting inputted dates to mysql dates
	 * @return
	 */
	public String formatDate(String dateString) {

		DateTimeFormatter sqlFormat = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");

		List<DateTimeFormatter> formatters = new ArrayList<>();
		formatters.add(DateTimeFormatter.ofPattern("yyyy-MM-dd'T'HH:mm:ss"));
		formatters.add(DateTimeFormatter.ofPattern("yyyy-MM-dd'T'hh:mm"));
		formatters.add(DateTimeFormatter.ofPattern("yyyy-MM-dd'T'HH:mm"));
		formatters.add(DateTimeFormatter.ofPattern("MMM d, yyyy, H:mm a z"));
		formatters.add(DateTimeFormatter.ofPattern("MMM d, yyyy, h:mm a z"));
		formatters.add(DateTimeFormatter.ofPattern("MMM dd, yyyy, h:mm a z"));
		formatters.add(DateTimeFormatter.ofPattern("yyyy/MM/dd HH:mm:ss"));
		formatters.add(DateTimeFormatter.ofPattern("MM/dd/yyyy HH:mm:ss"));
		formatters.add(DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss"));
		formatters.add(DateTimeFormatter.ofPattern("dd MMM yyyy HH:mm a z"));
		formatters.add(DateTimeFormatter.ofPattern("dd MMM yyyy HH a z"));
		formatters.add(DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm z"));
		formatters.add(DateTimeFormatter.ofPattern("MMM d, yyyy HH:mm:ss a"));
		formatters.add(DateTimeFormatter.ofPattern("MMM d, yyyy, HH:mm:ss a"));
		formatters.add(DateTimeFormatter.ofPattern("MMM dd, yyyy HH:mm:ss a"));
		formatters.add(DateTimeFormatter.ofPattern("MMM dd, yyyy, HH:mm:ss a"));

		List<DateTimeFormatter> formattersNoTime = new ArrayList<>();

		formattersNoTime.add(DateTimeFormatter.ofPattern("MMM dd, yyyy"));
		formattersNoTime.add(DateTimeFormatter.ofPattern("MMM d, yyyy"));
		formattersNoTime.add(DateTimeFormatter.ofPattern("MMMM dd, yyyy"));
		formattersNoTime.add(DateTimeFormatter.ofPattern("MMMM d, yyyy"));
		formattersNoTime.add(DateTimeFormatter.ofPattern("MMMM d yyyy"));
		formattersNoTime.add(DateTimeFormatter.ofPattern("MMMM dd['th']['st']['nd']['rd'] yyyy"));
		formattersNoTime.add(DateTimeFormatter.ofPattern("MMMM d['th']['st']['nd']['rd'] yyyy"));
		formattersNoTime.add(DateTimeFormatter.ofPattern("MM/dd/yyyy"));
		formattersNoTime.add(DateTimeFormatter.ofPattern("M/dd/yyyy"));
		formattersNoTime.add(DateTimeFormatter.ofPattern("MM/d/yyyy"));
		formattersNoTime.add(DateTimeFormatter.ofPattern("M/d/yyyy"));
		formattersNoTime.add(DateTimeFormatter.ofPattern("yyyy/MM/dd"));
		formattersNoTime.add(DateTimeFormatter.ofPattern("yyyy-MM-dd"));
		formattersNoTime.add(DateTimeFormatter.ofPattern("yyyy-MMM-dd"));
		formattersNoTime.add(DateTimeFormatter.ofPattern("MM-dd-yyyy"));
		formattersNoTime.add(DateTimeFormatter.ofPattern("dd MMM yyyy"));
		formattersNoTime.add(DateTimeFormatter.ofPattern("d MMM yyyy"));
		formattersNoTime.add(DateTimeFormatter.ofPattern("dd-MMM-yy"));


		DateTimeFormatter monthYear = DateTimeFormatter.ofPattern("MMMM yyyy");


		for (DateTimeFormatter formatter: formatters) {
			try {
				// Take a try
				return LocalDateTime.parse(dateString, formatter).format(sqlFormat);
			} catch (Exception e) {
				//logger.error("ERROR: Failed to parse date {} with format {}\n{}", dateString, formatter.toString(), e);
			}
		}


		for (DateTimeFormatter formatterNoTime : formattersNoTime) {
			try {
				// Take a try
				LocalDate date = LocalDate.parse(dateString, formatterNoTime);
				return LocalDateTime.of(date, LocalTime.MIDNIGHT).format(sqlFormat);
			} catch (Exception e) {
				//logger.error("ERROR: Failed to parse date {} with format {}\n{}", dateString, formatterNoTime.toString(), e);
			}
		}

		try {
			// Take a try
			LocalDate date = YearMonth.parse(dateString, monthYear).atDay(1);
			return date.atStartOfDay().format(sqlFormat);
		} catch (Exception e) {
			//logger.error("ERROR: Failed to parse date {} with format {}\n{}", dateString, monthYear.toString(), e);
		}

		return dateString;
	}

	@Override
	public String toString() {
		// get sources
		StringBuilder sbSources = new StringBuilder();
		return "Vulnerability [cveId=" + cveId + ", description=" + description + ", platform=" + platform + ", patch=" + patch + ", publishDate=" + publishDate + ", createDate=" + createDate + ", lastModifydDate="
				+ lastModifiedDate + ", fixDate=" + fixDate + ", existInNvd=" + statusNvd + ", existInMitre=" + statusMitre + ", timeGapNvd=" + timeGapNvd + ", timeGapMitre=" + timeGapMitre + ", sourceURL=" + sbSources
				+ ", nvdSearchResult=" + nvdSearchResult + ", mitreSearchResult=" + mitreSearchResult + ", nvipNote=" + nvipNote + ", vdoCharacteristic=" + vdoCharacteristic + ", severity=" + cvssSCore + "]";
	}

	public CveReconcileStatus getCveReconcileStatus() {
		return cveReconcileStatus;
	}

	public String getSourceDomainName() {
		return sourceDomainName;
	}

	public void setSourceDomainName(String sourceDomainName) {
		this.sourceDomainName = sourceDomainName;
	}

}
