/ **
* Copyright 2021 Rochester Institute of Technology (RIT). Developed with
* government support under contract 70RCSA22C00000008 awarded by the United
* States Department of Homeland Security for Cybersecurity and Infrastructure Security Agency.
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the “Software”), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in
* all copies or substantial portions of the Software.
*
* THE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
* SOFTWARE.
* /

/**
 * Copyright 2023 Rochester Institute of Technology (RIT). Developed with
 * government support under contract 70RCSA22C00000008 awarded by the United
 * States Department of Homeland Security for Cybersecurity and Infrastructure Security Agency.for Cybersecurity and Infrastructure Security Agency.
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
package edu.rit.se.nvip.crawler.htmlparser;

import edu.rit.se.nvip.db.model.RawVulnerability;
import lombok.extern.slf4j.Slf4j;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.jsoup.Jsoup;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.select.Elements;
import edu.rit.se.nvip.utils.UtilHelper;

import java.util.*;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

/**
 * Parse Web Pages for Exploit DB
 * (ex. https://www.exploit-db.com/exploits/51031)
 * (ex. https://www.exploit-db.com/exploits/51030)
 * @author axoeec
 *
 */
@Slf4j
public class ExploitDBParser extends AbstractCveParser {

	public static final String DOMAIN_NAME = "exploit-db";

	public ExploitDBParser() {
		sourceDomainName = DOMAIN_NAME;
	}

	public ExploitDBParser(String domainName) {
		sourceDomainName = domainName;
	}

	@Override
	public List<RawVulnerability> parseWebPage(String sSourceURL, String sCVEContentHTML) {
		List<RawVulnerability> vulnerabilities = new ArrayList<>();

		// Check if it brings you to a pdf
 		if (sSourceURL.contains("docs"))
			return vulnerabilities;

		Set<String> uniqueCves = new HashSet<>();

		Document document = Jsoup.parse(sCVEContentHTML);

		String date = null;
		String platformName = null;
		String description = null;
		String lastModifiedDate = UtilHelper.longDateFormat.format(new Date());

		/*
		 * Find CVEs
		 */
		Elements possibleCves = document.getElementsByAttributeValue("name", "description");
		if (possibleCves.size() == 1) {
			Element cveElement = possibleCves.get(0);
			Pattern pattern = Pattern.compile(regexCVEID);
			Matcher matcher = pattern.matcher(cveElement.attr("content"));
			while (matcher.find())
				uniqueCves.add(matcher.group());
		} else {
			log.warn("Multiple elements with name=\"description\" at: " + sSourceURL);
		}

		if (uniqueCves.size() == 0) {
			log.warn("No CVEs found at: " + sSourceURL);
//			UtilHelper.addBadUrl(sSourceURL, "No CVEs found");
			return vulnerabilities;
		}

		/*
		 * Find Product
		 */
		Elements titles = document.getElementsByTag("title");
		if (titles.size() == 1) {
			platformName = titles.get(0).text();
		} else {
			log.warn("More than 1 title property: " + sSourceURL);
		}

		if (platformName == null) {
			log.warn("Platform is null: " + sSourceURL);
		}

		/*
		 * Find Published Date
		 */
		Elements possibleDates = document.getElementsByAttributeValue("property", "article:published_time");
		if (possibleDates.size() == 1) {
			date = possibleDates.get(0).attr("content");
		} else {
			log.error("Multiple date fields found at: {}", sSourceURL);
		}

		/**
		 * Find description
		 */

		Elements codeTags = document.getElementsByTag("code");
		if (codeTags.size() == 1) {
			description = codeTags.get(0).text();
		} else if (codeTags.size() == 0) {
//			UtilHelper.addBadUrl(sSourceURL, "No description found");
			return vulnerabilities;
		}  //			UtilHelper.addBadUrl(sSourceURL, "Multiple descriptions found");

		if (uniqueCves.size() == 1) {
			String cveId = uniqueCves.iterator().next();
			RawVulnerability vuln = new RawVulnerability(sSourceURL, cveId, date, lastModifiedDate, description, getClass().getSimpleName());
			vulnerabilities.add(vuln);
		} else {
			StringBuilder currDesc = new StringBuilder();
			String currentCve = null;
			Pattern pattern = Pattern.compile(regexCVEID);
			Matcher matcher = pattern.matcher(currDesc.toString());
			for (String block : description.split("\n\n")) {
				matcher.reset(block);
				if (matcher.find()) {
					if (currentCve == null)
						currentCve = matcher.group();
					else {
						RawVulnerability vuln = new RawVulnerability(sSourceURL, currentCve, date, lastModifiedDate, currDesc.toString(), getClass().getSimpleName());
						vulnerabilities.add(vuln);
						currDesc = new StringBuilder();
						currentCve = matcher.group();
					}
				}
				currDesc.append(block).append("\n\n");
			}
			if (currentCve == null) {
				vulnerabilities.clear();
				for (String cve : uniqueCves) {
					// means that description is not separated into blocks based on CVEid
					// give all vulnerabilities the same description in this case
					RawVulnerability vuln = new RawVulnerability(sSourceURL, cve, date, lastModifiedDate, description, getClass().getSimpleName());
					vulnerabilities.add(vuln);
				}
			} else {
				RawVulnerability vuln = new RawVulnerability(sSourceURL, currentCve, date, lastModifiedDate, currDesc.toString(), getClass().getSimpleName());
				vulnerabilities.add(vuln);
			}
		}

		return vulnerabilities;
	}
}
