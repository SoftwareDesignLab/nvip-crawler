package edu.rit.se.nvip.model;

import java.sql.Timestamp;
import java.util.Arrays;
import java.util.Objects;

/**
 * Simple model to represent a RawVulnerability (a row in the rawdescriptions table)
 */
public class RawVulnerability extends Vulnerability{

    private final String sourceUrl;
    private final int id;

    public enum SourceType {
        CNA("cna"),
        SA("security_advisory"),
        THIRD_PARTY("third_party"),
        BUG_BOUNTY("bug_bounty"),
        OTHER("other");

        public final String type;
        SourceType(String label) {
            this.type = label;
        }
        public String getType() {
            return this.type;
        }
        public static SourceType get(String sourceType) {
            return Arrays.stream(SourceType.values()).filter(st -> st.type.equals(sourceType)).findFirst().orElse(OTHER);
        }
    }

    public enum FilterStatus {
        NEW(0),
        UNEVALUATED(1),
        PASSED(2),
        FAILED(3);
        public final int value;
        FilterStatus(int value) {
            this.value = value;
        }
        public static FilterStatus get(int value) {
            return Arrays.stream(FilterStatus.values()).filter(v -> v.value == value).findFirst().orElse(FAILED);
        }
    }

    private final SourceType sourceType;
    private FilterStatus filterStatus;
    private boolean filterStatusChanged = false;

    public RawVulnerability(int id, String cveId, String description, Timestamp publishDate, Timestamp lastModifiedDate, Timestamp createDate, String sourceUrl, String sourceType, int filterStatus) {
        super(cveId, description, publishDate, lastModifiedDate, createDate);
        this.id = id;
        this.sourceUrl = sourceUrl;
        this.sourceType = SourceType.get(sourceType);
        this.filterStatus = FilterStatus.get(filterStatus);
    }

    /**
     * Constructor just missing the sourceType arg. This exists so I don't need to update dozens of tests
     * // todo dump this constructor
     * @param id
     * @param cveId
     * @param description
     * @param publishDate
     * @param lastModifiedDate
     * @param createDate
     * @param sourceUrl
     */
    public RawVulnerability(int id, String cveId, String description, Timestamp publishDate, Timestamp lastModifiedDate, Timestamp createDate, String sourceUrl) {
        super(cveId, description, publishDate, lastModifiedDate, createDate);
        this.id = id;
        this.sourceUrl = sourceUrl;
        this.sourceType = SourceType.OTHER;
        this.filterStatus = FilterStatus.UNEVALUATED;
    }

    public SourceType getSourceType() {
        return this.sourceType;
    }

    /**
     * return boolean if Raw Vulnerability is high priority
     * @return
     */
    public boolean isHighPriority() {
        return this.sourceType == SourceType.CNA || this.sourceType == SourceType.SA;
    }

    public FilterStatus getFilterStatus() {
        return this.filterStatus;
    }

    public void setFilterStatus(FilterStatus filterStatus) {
        if (this.filterStatus != filterStatus) {
            this.filterStatusChanged = true;
        }
        this.filterStatus = filterStatus;
    }

    public boolean filterStatusChanged() {
        return this.filterStatusChanged;
    }

    public boolean isFiltered() {
        return this.filterStatus == FilterStatus.PASSED || this.filterStatus == FilterStatus.FAILED;
    }

    public String getSourceUrl() {
        return sourceUrl;
    }

    public int getId() {
        return this.id;
    }

    public String getIdString() {
        return String.valueOf(this.id);
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;
        RawVulnerability that = (RawVulnerability) o;
        return id == that.id;
    }

    public boolean generalEquals(RawVulnerability other) {
        return (this.getCveId().equals(other.getCveId()) &&
                this.getDescription().equals(other.getDescription()) &&
                this.getSourceUrl().equals(other.getSourceUrl()));
    }

    @Override
    public int hashCode() {
        return Objects.hash(id);
    }
}
