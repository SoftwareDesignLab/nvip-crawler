package model;

import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.Mockito;

import java.sql.Timestamp;
import java.time.Clock;
import java.time.Instant;
import java.util.HashSet;
import java.util.LinkedHashSet;
import java.util.Set;

class CompositeVulnerabilityTest {

    private final Clock mockClock;
    private final long dummyMillis;
    private final String dummyCveId;
    private final int dummyId;
    private final String dummyDescription;
    private final Timestamp dummyPub;
    private final Timestamp dummyMod;
    private final Timestamp dummyCreate;
    private final Timestamp dummyDescCreate;
    private final String dummyBuildString;


    CompositeVulnerabilityTest() {
        this.dummyCveId = "CVE-xxxx-xxx";
        this.dummyId = 1;
        this.dummyDescription = "dummy description";
        this.dummyMillis = Instant.now().toEpochMilli();
        this.dummyPub = offset(0);
        this.dummyMod = offset(3);
        this.dummyCreate = offset(2);
        this.dummyDescCreate = offset(4);
        this.dummyBuildString = "((1,2),3)";
        this.mockClock = Mockito.mock(Clock.class);
        CompositeDescription.setClock(mockClock);
        CompositeVulnerability.setClock(mockClock);
    }

    @BeforeEach
    void resetMocks() {
        Mockito.when(mockClock.millis()).thenReturn(dummyMillis);
    }

    private RawVulnerability genRawVuln(int id) {
        return new RawVulnerability(id, dummyCveId, "description"+id, offset(-id), offset(id), offset(-10), "website"+id );
    }
    private Set<RawVulnerability> genRawVulns(int size, int startId) {
        Set<RawVulnerability> out = new LinkedHashSet<>();
        for (int i = 0; i < size; i++) {
            out.add(genRawVuln(i+startId));
        }
        return out;
    }

    private CompositeDescription genCompDes(String buildString, int nSources) {
        return new CompositeDescription(dummyId, dummyCveId, dummyDescription, dummyDescCreate, buildString, genRawVulns(nSources, 1));
    }


    private CompositeVulnerability genVuln() {
        return new CompositeVulnerability(dummyCveId, dummyId, genCompDes(dummyBuildString, 3), dummyPub, dummyMod, dummyCreate);
    }

    private Timestamp offset(int nHours) {
        return new Timestamp(dummyMillis + nHours*3600L*1000);
    }

    @Test
    void constructorFromFields() {
        CompositeVulnerability vuln = genVuln();
        Assertions.assertEquals(CompositeVulnerability.ReconciliationStatus.UNCHANGED, vuln.getReconciliationStatus());
        Assertions.assertEquals(dummyCveId, vuln.getCveId());
        Assertions.assertEquals(dummyDescription, vuln.getDescription());
        Assertions.assertEquals(offset(-3), vuln.getPublishDate());
        Assertions.assertEquals(offset(3), vuln.getLastModifiedDate());
        Assertions.assertEquals(dummyCreate, vuln.getCreateDate());
        Assertions.assertEquals(3, vuln.getComponents().size());
        Assertions.assertEquals(3, vuln.getSources().size());
        Assertions.assertEquals(1, vuln.getDescriptionId());
        Assertions.assertEquals("((1,2),3)", vuln.getBuildString());
        Assertions.assertEquals(dummyDescCreate, vuln.getDescriptionCreateDate());
    }

    @Test
    void constructorFromRaw() {
        CompositeVulnerability vuln = new CompositeVulnerability(genRawVuln(4));
        Assertions.assertEquals(CompositeVulnerability.ReconciliationStatus.NEW, vuln.getReconciliationStatus());
        Assertions.assertEquals(dummyCveId, vuln.getCveId());
        Assertions.assertEquals("description4", vuln.getDescription());
        Assertions.assertEquals(offset(-4), vuln.getPublishDate());
        Assertions.assertEquals(offset(4), vuln.getLastModifiedDate());
        Assertions.assertEquals(offset(-10), vuln.getCreateDate());
        Assertions.assertEquals(1, vuln.getComponents().size());
        Assertions.assertEquals(1, vuln.getSources().size());
        Assertions.assertEquals(0, vuln.getDescriptionId());
        Assertions.assertEquals("4", vuln.getBuildString());
        Assertions.assertEquals(offset(0), vuln.getDescriptionCreateDate());
    }

    @Test
    void fromSet() {
        CompositeVulnerability vuln = CompositeVulnerability.fromSet(genRawVulns(5, 1), "reconciled description");
        Assertions.assertEquals(CompositeVulnerability.ReconciliationStatus.NEW, vuln.getReconciliationStatus());
        Assertions.assertEquals(dummyCveId, vuln.getCveId());
        Assertions.assertEquals("reconciled description", vuln.getDescription());
        Assertions.assertEquals(offset(-5), vuln.getPublishDate());
        Assertions.assertEquals(offset(5), vuln.getLastModifiedDate());
        Assertions.assertEquals(offset(0), vuln.getCreateDate());
        Assertions.assertEquals(5, vuln.getComponents().size());
        Assertions.assertEquals(5, vuln.getSources().size());
        Assertions.assertEquals(0, vuln.getDescriptionId());
        Assertions.assertEquals("(1,2,3,4,5)", vuln.getBuildString());
        Assertions.assertEquals(offset(0), vuln.getDescriptionCreateDate());

    }

    @Test
    void getComponents() {
        CompositeVulnerability vuln = genVuln();
        Set<RawVulnerability> rawVulns = vuln.getComponents();
        Assertions.assertEquals(3, rawVulns.size());
    }

    @Test
    void getReconciliationStatus() {
        CompositeVulnerability vuln = genVuln();
        Assertions.assertEquals(CompositeVulnerability.ReconciliationStatus.UNCHANGED, vuln.getReconciliationStatus());
        vuln.updateDescription("new description", new HashSet<>(), false);
        Assertions.assertEquals(CompositeVulnerability.ReconciliationStatus.UPDATED, vuln.getReconciliationStatus());
        vuln = genVuln();
        vuln.updateDescription(dummyDescription, new HashSet<>(), false);
        Assertions.assertEquals(CompositeVulnerability.ReconciliationStatus.UNCHANGED, vuln.getReconciliationStatus());
    }

    @Test
    void getSources() {
        CompositeVulnerability vuln = genVuln();
        Set<String> sources = vuln.getSources();
        Assertions.assertEquals(3, sources.size());
        Assertions.assertTrue(sources.contains("website1"));
        Assertions.assertTrue(sources.contains("website2"));
        Assertions.assertTrue(sources.contains("website3"));
    }

    @Test
    void updateDescriptionNoResynth() {
        CompositeVulnerability vuln = genVuln();
        vuln.updateDescription("updated description", genRawVulns(3, 4), false);
        Assertions.assertEquals(vuln.getReconciliationStatus(), CompositeVulnerability.ReconciliationStatus.UPDATED);
        Assertions.assertEquals("updated description", vuln.getDescription());
        Assertions.assertEquals("(((1,2),3),4,5,6)", vuln.getBuildString());
        Assertions.assertEquals(6, vuln.getComponents().size());
    }

    @Test
    void updateDescriptionResynth() {
        CompositeVulnerability vuln = genVuln();
        vuln.updateDescription("updated description", genRawVulns(3, 4), true);
        Assertions.assertEquals(vuln.getReconciliationStatus(), CompositeVulnerability.ReconciliationStatus.UPDATED);
        Assertions.assertEquals("updated description", vuln.getDescription());
        Assertions.assertEquals("(1,2,3,4,5,6)", vuln.getBuildString());
        Assertions.assertEquals(6, vuln.getComponents().size());
    }

    @Test
    void updateDescriptionNoEffect() {
        CompositeVulnerability vuln = genVuln();
        vuln.updateDescription(dummyDescription, new HashSet<>(), true);
        Assertions.assertEquals(CompositeVulnerability.ReconciliationStatus.UNCHANGED, vuln.getReconciliationStatus());
    }

    @Test
    void setDescriptionId() {
        CompositeVulnerability vuln = genVuln();
        vuln.setDescriptionId(10);
        Assertions.assertEquals(10, vuln.getDescriptionId());
        vuln.setDescriptionId(20);
        Assertions.assertEquals(20, vuln.getDescriptionId());
    }

    @Test
    void getDescriptionId() {
        CompositeVulnerability vuln = genVuln();
        vuln.setDescriptionId(10);
        Assertions.assertEquals(10, vuln.getDescriptionId());
        vuln.setDescriptionId(20);
        Assertions.assertEquals(20, vuln.getDescriptionId());
    }

    @Test
    void getBuildString() {
        CompositeVulnerability vuln = genVuln();
        Assertions.assertEquals(dummyBuildString, vuln.getBuildString());
        vuln.updateDescription("", genRawVulns(2, 4), false);
        Assertions.assertEquals("(((1,2),3),4,5)", vuln.getBuildString());
        vuln.updateDescription("", genRawVulns(5, 6), true);
        Assertions.assertEquals("(1,2,3,4,5,6,7,8,9,10)", vuln.getBuildString());
    }

    @Test
    void getDescriptionCreateDate() {
        CompositeVulnerability vuln = genVuln();
        Assertions.assertEquals(dummyDescCreate, vuln.getDescriptionCreateDate());
        Mockito.when(mockClock.millis()).thenReturn(dummyMillis + 3600L);
        vuln.updateDescription("", genRawVulns(2,4), false);
        Assertions.assertEquals(new Timestamp(dummyMillis+3600L), vuln.getDescriptionCreateDate());
        Mockito.when(mockClock.millis()).thenReturn(dummyMillis+7200L);
        vuln.updateDescription("", genRawVulns(4, 6), true);
        Assertions.assertEquals(new Timestamp(dummyMillis+7200L), vuln.getDescriptionCreateDate());
    }

    @Test
    void getDescription() {
        CompositeVulnerability vuln = genVuln();
        Assertions.assertEquals(dummyDescription, vuln.getDescription());
        vuln.updateDescription("new description", new HashSet<>(), false);
        Assertions.assertEquals("new description", vuln.getDescription());
        vuln.updateDescription("new new description", new HashSet<>(), true);
        Assertions.assertEquals("new new description", vuln.getDescription());
    }

    @Test
    void getPublishDate() {
        CompositeVulnerability vuln = genVuln();
        Assertions.assertEquals(offset(-3), vuln.getPublishDate());
        vuln.updateDescription("", genRawVulns(1, 20), false);
        Assertions.assertEquals(offset(-20), vuln.getPublishDate());
        vuln.updateDescription("", genRawVulns(1, 10), false);
        Assertions.assertEquals(offset(-20), vuln.getPublishDate());
    }

    @Test
    void getLastModifiedDate() {
        CompositeVulnerability vuln = genVuln();
        Assertions.assertEquals(offset(3), vuln.getLastModifiedDate());
        vuln.updateDescription("", genRawVulns(1, 20), false);
        Assertions.assertEquals(offset(20), vuln.getLastModifiedDate());
        vuln.updateDescription("", genRawVulns(1, 10), false);
        Assertions.assertEquals(offset(20), vuln.getLastModifiedDate());
    }
}