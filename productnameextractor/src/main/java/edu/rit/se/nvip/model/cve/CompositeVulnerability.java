/**
 * Copyright 2023 Rochester Institute of Technology (RIT). Developed with
 * government support under contract 70RSAT19CB0000020 awarded by the United
 * States Department of Homeland Security.
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
package edu.rit.se.nvip.model.cve;

import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.LinkedHashSet;
import java.util.List;

/**
 * 
 * Extends base Vulnerability model class to store composite info
 * 
 * @author axoeec
 *
 */
public class CompositeVulnerability extends Vulnerability {

	/**
	 * reconcile status
	 */
	public enum CveReconcileStatus {
		DO_NOT_CHANGE, UPDATE, INSERT;
	}

	/**
	 * Used for tagging
	 */
	private String nvdSearchResult = ""; // the note string the Nvip associated to this CVE
	private String mitreSearchResult = ""; // the note string the Nvip associated to this CVE
	private String nvipNote = ""; // comments added by Nvip

	/**
	 * related objects
	 */
	// the source URL list (where we found this vulnerability): Does not allow
	// duplicates!
	private final LinkedHashSet<VulnSource> sourceURL = new LinkedHashSet<>();

	// affected products
	private final List<AffectedProduct> affectedProducts = new ArrayList<>();

	CveReconcileStatus cveReconcileStatus = CveReconcileStatus.DO_NOT_CHANGE;

	private String sourceDomainName;

	/**
	 * For tests
	 * @param vulnID
	 * @param cveID
	 */
	public CompositeVulnerability(int vulnID, String cveID) {
		super();
		this.vulnID = vulnID;
		this.cveId = cveID;
		this.platform = "";
		this.publishDate = String.valueOf(LocalDateTime.now());
		this.lastModifiedDate = String.valueOf(LocalDateTime.now());
		this.description = "";
		this.sourceDomainName = "sourceDomainName";
	}

	/**
	 * For ProductNameExtractor
	 * @param vulnID
	 * @param cveID
	 * @param description
	 * @param reconcileStatus
	 */
	public CompositeVulnerability(int vulnID, String cveID, String description, CveReconcileStatus reconcileStatus) {
		this(vulnID, cveID);
		this.description = description;
		this.cveReconcileStatus = reconcileStatus;
	}

	/**
	 * Vulnerability Constructor
	 * 
	 * @param vulnID
	 * @param sourceURL
	 * @param cveID
	 * @param platform
	 * @param publishDate
	 * @param lastModifiedDate
	 * @param description
	 * @param sourceDomainName TODO
	 */
	public CompositeVulnerability(int vulnID, String sourceURL, String cveID, String platform, String publishDate, String lastModifiedDate, String description, String sourceDomainName) {
		super();
		this.vulnID = vulnID;
		this.cveId = cveID;
		this.sourceURL.add(new VulnSource(cveID, sourceURL));
		this.platform = platform;
		this.publishDate = publishDate;
		this.lastModifiedDate = lastModifiedDate;
		this.description = description;
		this.sourceDomainName = sourceDomainName;
		this.createDate = LocalDateTime.now().format(dateTimeFormatter);

	}

	/**
	 * return list of source urls
	 *
	 */
	public List<String> getSourceURL() {
		List<String> sURLs = new ArrayList<>();
		for (VulnSource vulnSource : sourceURL) {
			sURLs.add(vulnSource.getUrl());
		}
		return sURLs;
	}

	/**
	 * get VulnSource list
	 *
	 */
	public List<VulnSource> getVulnSourceList() {
		return new ArrayList<>(sourceURL);
	}

	public void addAffectedProduct(AffectedProduct affectedProduct) {
		if (affectedProduct.getCveId() == null) {
			AffectedProduct copy = new AffectedProduct(affectedProduct);
			copy.setCveId(this.cveId);
			this.affectedProducts.add(copy);
		} else {
			this.affectedProducts.add(affectedProduct);
		}
	}

	public void addSourceURL(String sourceURL) {
		this.sourceURL.add(new VulnSource(cveId, sourceURL));
	}

	public String getCveId() {
		return cveId;
	}

	public String getDescription() {
		return description;
	}

	public String getNvdSearchResult() {
		return nvdSearchResult;
	}

	public List<AffectedProduct> getAffectedProducts() {
		return affectedProducts;
	}

	public void setNvdSearchResult(String nvdSearchResult) {
		this.nvdSearchResult = nvdSearchResult;
	}

	public String getMitreSearchResult() {
		return mitreSearchResult;
	}

	public void setMitreSearchResult(String mitreSearchResult) {
		this.mitreSearchResult = mitreSearchResult;
	}

	public String getNvipNote() {
		return nvipNote;
	}

	public void setNvipNote(String nvipNote) {
		this.nvipNote = nvipNote;
	}

	@Override
	public String toString() {
		// get sources
		StringBuilder sbSources = new StringBuilder();
		for (VulnSource vulnSource : sourceURL)
			sbSources.append(vulnSource.url).append("\t");

		return "Vulnerability [cveId=" + cveId + ", description=" + description + ", platform=" + platform + ", patch=" + patch + ", publishDate=" + publishDate + ", createDate=" + createDate + ", lastModifydDate="
				+ lastModifiedDate + ", fixDate=" + fixDate + ", existInNvd=" + statusNvd + ", existInMitre=" + statusMitre + ", timeGapNvd=" + timeGapNvd + ", timeGapMitre=" + timeGapMitre + ", sourceURL=" + sbSources
				+ ", nvdSearchResult=" + nvdSearchResult + ", mitreSearchResult=" + mitreSearchResult + ", nvipNote=" + nvipNote + "]";
	}

	public CveReconcileStatus getCveReconcileStatus() {
		return cveReconcileStatus;
	}

	public void setCveReconcileStatus(CveReconcileStatus cveReconcileStatus) {
		this.cveReconcileStatus = cveReconcileStatus;
	}

}
