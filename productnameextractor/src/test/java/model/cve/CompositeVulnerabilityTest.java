package model.cve;

/**
 * Copyright 2023 Rochester Institute of Technology (RIT). Developed with
 * government support under contract 70RSAT19CB0000020 awarded by the United
 * States Department of Homeland Security.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

import model.cpe.AffectedProduct;
import org.junit.jupiter.api.Test;

import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.concurrent.*;

import static org.junit.jupiter.api.Assertions.*;

/**
 * Unit tests for CompositeVulnerability class
 *
 * @author Richard Sawh
 */
public class CompositeVulnerabilityTest {
	private final DateTimeFormatter dateTimeFormatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");


	@Test
	public void testGettersAndConstructor() {
		CompositeVulnerability vulnerability = new CompositeVulnerability(1, "CVE-2023-1234");
		//
		// Test getters
		assertEquals(1, vulnerability.getVulnID());
		assertEquals("CVE-2023-1234", vulnerability.getCveId());
		assertEquals("", vulnerability.getDescription());
		assertEquals("", vulnerability.getNvdSearchResult());
		assertEquals("", vulnerability.getMitreSearchResult());
		assertEquals("", vulnerability.getNvipNote());
		assertTrue(vulnerability.getAffectedProducts().isEmpty());
		assertTrue(vulnerability.getSourceURL().isEmpty());
	}

	@Test
	public void testSetters() {
		CompositeVulnerability vulnerability = new CompositeVulnerability(1, "CVE-2023-1234");

		// Test setters
		vulnerability.setDescription("Description");
		vulnerability.setNvdSearchResult("NVD search result");
		vulnerability.setMitreSearchResult("Mitre search result");
		vulnerability.setNvipNote("Nvip note");

		assertEquals("Description", vulnerability.getDescription());
		assertEquals("NVD search result", vulnerability.getNvdSearchResult());
		assertEquals("Mitre search result", vulnerability.getMitreSearchResult());
		assertEquals("Nvip note", vulnerability.getNvipNote());
	}

	@Test
	public void testAddAffectedProduct() {
		CompositeVulnerability vulnerability = new CompositeVulnerability(1, "CVE-2023-1234");
		AffectedProduct affectedProduct = new AffectedProduct("ProductA", "1.0", "Affected");
		affectedProduct.setCveId("CVE-2023-1234");
		vulnerability.addAffectedProduct(affectedProduct);

		assertEquals(1, vulnerability.getAffectedProducts().size());
		assertEquals(affectedProduct, vulnerability.getAffectedProducts().get(0));
	}

	@Test
	public void testAddSourceURL() {
		CompositeVulnerability vulnerability = new CompositeVulnerability(1, "CVE-2023-1234");
		String sourceURL = "https://example.com/cve-2023-1234";

		vulnerability.addSourceURL(sourceURL);

		assertEquals(1, vulnerability.getSourceURL().size());
		assertEquals(sourceURL, vulnerability.getSourceURL().get(0));
	}

	@Test
	public void testCveReconcileStatus() {
		CompositeVulnerability vulnerability = new CompositeVulnerability(1, "CVE-2023-1234");

		assertEquals(CompositeVulnerability.CveReconcileStatus.DO_NOT_CHANGE, vulnerability.getCveReconcileStatus());

		vulnerability.setCveReconcileStatus(CompositeVulnerability.CveReconcileStatus.UPDATE);

		assertEquals(CompositeVulnerability.CveReconcileStatus.UPDATE, vulnerability.getCveReconcileStatus());
	}


	@Test
	public void testToString() {
		// Create a thread pool with a fixed number of threads
		int numThreads = 2;
		ExecutorService executorService = Executors.newFixedThreadPool(numThreads);

		// Create a task to execute
		Callable<String> task = () -> {
			CompositeVulnerability vulnerability = new CompositeVulnerability(1, "CVE-2023-1234");
			String publishDate = LocalDateTime.now().format(dateTimeFormatter);
			vulnerability.setDescription("Description");
			vulnerability.setNvdSearchResult("NVD search result");
			vulnerability.setMitreSearchResult("Mitre search result");
			vulnerability.setNvipNote("Nvip note");
			vulnerability.addSourceURL("https://example.com/cve-2023-1234");
			//remove milliseconds from publishDate in compositeVulnerability
			vulnerability.setPublishDate(publishDate);
			//remove milliseconds from lastModifiedDate in compositeVulnerability
			vulnerability.setLastModifiedDate(publishDate);
			//remove space after url in compositeVulnerability
			String actual = vulnerability.toString().replace("\t", "").trim();


			String expected = "Vulnerability [cveId=CVE-2023-1234, description=Description, platform=, patch=null, publishDate=" + publishDate + ", createDate=null, lastModifydDate=" + publishDate + ", fixDate=null, existInNvd=0, existInMitre=0, timeGapNvd=0, timeGapMitre=0, sourceURL=https://example.com/cve-2023-1234, nvdSearchResult=NVD search result, mitreSearchResult=Mitre search result, nvipNote=Nvip note]";
			assertEquals(expected, actual);
			return expected.equals(actual) ? "Pass" : "Fail";
		};

		try {
			String result = task.call();
			System.out.println(result);
		} catch (Exception e) {
			throw new RuntimeException(e);
		}
	}
}