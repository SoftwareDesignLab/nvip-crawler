# CI for NVIP

name: Java CI

on: [push]

env:
  AWS_REGION: 'us-east-1'
  OUTPUT_DIR: 'output'
  RESOURCE_DIR: 'nvip_data'

jobs:
  # Build and Test Reconciler Component
  build-test-reconciler:
    runs-on: ubuntu-latest
    steps:
      - name: checkout
        uses: actions/checkout@v3
        with:
          lfs: 'true'
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      # Might not need this
      - name: Prepare MySQL Test DB
        run: |
          sudo /etc/init.d/mysql start

      - name: Initialize DB
        env:
          LIQUIBASE_URL: ${{ env.HIKARI_URL }}
          LIQUIBASE_USER: ${{ env.HIKARI_USER }}
          LIQUIBASE_PASS: ${{ env.HIKARI_PASSWORD }}
        run: |
          mysql -e 'CREATE DATABASE nvip;' -u${{ env.HIKARI_USER }} -p${{ env.HIKARI_PASSWORD }} 
          mvn liquibase:update --no-transfer-progress

      - name: Test and Build Reconciler with Maven
        run: |
          cd reconciler
          mvn dependency:go-offline
          mvn package

      - name: Publish Test Report
        if: success() || failure()
        uses: scacap/action-surefire-report@v1
        with:
          check_name: Reconciler Test Report

  # Build and Test Product Extraction Component
  build-test-product-extractor:
    runs-on: ubuntu-latest
    steps:
      - name: checkout
        uses: actions/checkout@v3
        with:
          lfs: 'true'
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      # Grab large files (w2v model) from S3 bucket
      - name: Pull file from S3 bucket
        run: |
          cd productnameextractor/nvip_data/data
          aws s3 cp s3://binaries-for-crawler/w2v_model_250.bin .

      # Setup MySQL DB for tests that require connection (Might not need this)
      - name: Start MySQL Service
        run: sudo /etc/init.d/mysql start
        # run: |
        #   sudo /etc/init.d/mysql start
        #   mysql -e 'CREATE DATABASE nvip;' -uroot -proot
        #   mysql -e 'SHOW DATABASES;' -uroot -proot
        #   mysql -e 'source nvip_data/mysql-database/CreateAndInitializeDb.sql' -uroot -proot

      - name: Initialize DB
        env:
          LIQUIBASE_URL: ${{ env.HIKARI_URL }}
          LIQUIBASE_USER: ${{ env.HIKARI_USER }}
          LIQUIBASE_PASS: ${{ env.HIKARI_PASSWORD }}
        run: |
          mysql -e 'CREATE DATABASE nvip;' -u${{ env.HIKARI_USER }} -p${{ env.HIKARI_PASSWORD }} 
          mvn liquibase:update --no-transfer-progress

      - name: Test and Build Product Extractor with Maven
        run: |
          cd productnameextractor
          mvn dependency:go-offline
          mvn package

      - name: Publish Test Report
        if: success() || failure()
        uses: scacap/action-surefire-report@v1
        with:
          check_name: PNE Test Report

  # Build and Test Patchfinder Component
  build-test-patchfinder:
    runs-on: ubuntu-latest
    steps:
      - name: checkout
        uses: actions/checkout@v3
        with:
          lfs: 'true'
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      # Setup MySQL DB for tests that require connection (Might not need this)
      - name: Start MySQL Service
        run: sudo /etc/init.d/mysql start
        # run: |
        #   sudo /etc/init.d/mysql start
        #   mysql -e 'CREATE DATABASE nvip;' -uroot -proot
        #   mysql -e 'SHOW DATABASES;' -uroot -proot
        #   mysql -e 'source nvip_data/mysql-database/CreateAndInitializeDb.sql' -uroot -proot

      - name: Initialize DB
        env:
          LIQUIBASE_URL: ${{ env.HIKARI_URL }}
          LIQUIBASE_USER: ${{ env.HIKARI_USER }}
          LIQUIBASE_PASS: ${{ env.HIKARI_PASSWORD }}
        run: |
          mysql -e 'CREATE DATABASE nvip;' -u${{ env.HIKARI_USER }} -p${{ env.HIKARI_PASSWORD }} 
          mvn liquibase:update --no-transfer-progress

      - name: Publish Test Report
        if: success() || failure()
        uses: scacap/action-surefire-report@v1
        with:
          check_name: Patchfinder Test Report

  # # Deploy main backend project to container registry
  # deploy-backend:
  #   runs-on: ubuntu-latest
  #   needs: build-test-backend
  #   if: ${{ success() && github.ref == 'refs/heads/dev' }}
  #   steps:
  #     - uses: actions/checkout@v3

  #     - name: Configure AWS credentials
  #       uses: aws-actions/configure-aws-credentials@v2
  #       with:
  #         aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
  #         aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  #         aws-region: ${{ env.AWS_REGION }}

  #     # Pull large files so they're in the container
  #     - name: Pull file from S3 bucket
  #       run: |
  #         cd productnameextractor/nvip_data/data
  #         aws s3 cp s3://binaries-for-crawler/w2v_model_250.bin .  

  #     - name: Login to GitHub Container Registry
  #       uses: docker/login-action@v2
  #       with:
  #         registry: ghcr.io
  #         username: ${{ github.actor }}
  #         password: ${{ secrets.GITHUB_TOKEN }}

  #     # Main project is called nvip-crawler, crawler component will be nvip-crawler-sub
  #     - name: Build and Push Docker Image for Backend
  #       run: |
  #         docker build . -t nvip-crawler:dev -t ghcr.io/softwaredesignlab/nvip-crawler:dev
  #         docker push ghcr.io/softwaredesignlab/nvip-crawler:dev

  # Deploy crawler component project to container registry
  deploy-crawler:
    runs-on: ubuntu-latest
    needs: build-test-crawler
    if: ${{ success() && github.ref == 'refs/heads/dev' }}
    steps:
      - uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and Push Docker Image for Crawler
        run: |
          cd crawler
          docker build . -t nvip-crawler-sub:dev -t ghcr.io/softwaredesignlab/nvip-crawler-sub:dev
          docker push ghcr.io/softwaredesignlab/nvip-crawler-sub:dev     
  

  # Deploy reconciler component project to container registry
  deploy-reconciler:
    runs-on: ubuntu-latest
    needs: build-test-reconciler
    if: ${{ success() && github.ref == 'refs/heads/dev' }}
    steps:
      - uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and Push Docker Image for Reconciler
        run: |
          cd reconciler
          docker build . -t nvip-reconciler:dev -t ghcr.io/softwaredesignlab/nvip-reconciler:dev
          docker push ghcr.io/softwaredesignlab/nvip-reconciler:dev  

  # Deploy product extractor component project to container registry
  deploy-product-extractor:
    runs-on: ubuntu-latest
    needs: build-test-product-extractor
    if: ${{ success() && github.ref == 'refs/heads/dev' }}
    steps:
      - uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      # Pull large files (w2v model) so they're in the container
      - name: Pull file from S3 bucket
        run: |
          cd productnameextractor/nvip_data/data
          aws s3 cp s3://binaries-for-crawler/w2v_model_250.bin . 

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and Push Docker Image for Product Extractor
        run: |
          cd productnameextractor
          docker build . -t nvip-product-extractor:dev -t ghcr.io/softwaredesignlab/nvip-product-extractor:dev
          docker push ghcr.io/softwaredesignlab/nvip-product-extractor:dev

  # Deploy patchfinder component project to container registry
  deploy-patchfinder:
    runs-on: ubuntu-latest
    needs: build-test-patchfinder
    if: ${{ success() && github.ref == 'refs/heads/dev' }}
    steps:
      - uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and Push Docker Image for Patchfinder
        run: |
          cd patchfinder
          docker build . -t nvip-patchfinder:dev -t ghcr.io/softwaredesignlab/nvip-patchfinder:dev
          docker push ghcr.io/softwaredesignlab/nvip-patchfinder:dev