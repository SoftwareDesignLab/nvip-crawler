/**
 * Copyright 2023 Rochester Institute of Technology (RIT). Developed with
 * government support under contract 70RSAT19CB0000020 awarded by the United
 * States Department of Homeland Security.
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

import db.DatabaseHelper;
import model.exploit.Exploit;

/**
 * 
 * Given a CVE list, this class identifies exploits that are related to them.
 * Exploits are supposed to be scraped by ExploitScraper earlier!
 *
 * TODO: Exploit Finder is a mess.
 *  1.) Get rid of the serialized object dependency, idk who thought that was a good idea --> DONE
 *  2.) Setup envvars for the exploit finder, we need envvars for exploitDB URL, exploit cve limit, and datapath (already there) --> DONE
 *  3.) We need to make sure exploits are being stored in the DB correctly, check the exploits table for existing exploits so we don't re-iterate
 *
 * @author Ahmet Okutan
 *
 */
public class ExploitIdentifier {
	private final Logger logger = LogManager.getLogger(getClass().getSimpleName());
	DatabaseHelper databaseHelper;
	ExploitScraper exploitScraper;

	public static void main(String[] args) {
		ExploitIdentifier main = new ExploitIdentifier(DatabaseHelper.getInstance(), "nvip_data",
				"https://gitlab.com/exploit-database/exploitdb");
		main.identifyAndStoreExploits();
	}

	/**
	 * ExploitScraper is initialized. It scrapes all exploits from
	 * the exploitDB .csv file. Existing exploits are derived from the database.
	 * New exploits are identified then stored in the database
	 */
	public ExploitIdentifier(DatabaseHelper databaseHelper, String dataPath, String edbUrl) {
		this.databaseHelper = databaseHelper;
		exploitScraper = new ExploitScraper(dataPath, edbUrl);
	}

	/**
	 * Scrape Exploits, compare with what we currently have in the DB, then
	 * identify the new ones and add them
	 */
	public void identifyAndStoreExploits() {
		this.exploitScraper.updateGitRepo();
		HashMap<String, List<Exploit>> exploitMap = this.exploitScraper.fillCVEtoIdMap();
		ArrayList<Exploit> newExploits = new ArrayList<>();
		logger.info("Found {} exploits from exploitDB, checking if any are for new CVEs...", exploitMap.size());
		for (String cveId: exploitMap.keySet()) {
			// Get vuln Id for CVE if exists
			List<Integer> vulnIds = databaseHelper.getVulnerabilityIdList(cveId);
			if (vulnIds.size() == 1) {
				int vulnid = vulnIds.get(0);
				// w/ cveid, check if any exploits exist
				List<Integer> exploitIds = databaseHelper.getExploitIds(cveId);
				for (Exploit exploit: exploitMap.get(cveId)) {
					// if so, check exploit ids
					// if we have a new exploit id, then add it to db
					if (!exploitIds.contains(exploit.getPublisherId())) {
						exploit.setVulnId(vulnid);
						newExploits.add(exploit);
					}
				}
			}
		}

		int countInserted = 0;

		logger.info("Inserting {} new exploits into the DB...", newExploits.size());

		for (Exploit exploit : newExploits) {
			countInserted = databaseHelper.insertExploit(exploit) ? countInserted + 1: countInserted;
		}

		logger.info("Successfully inserted {} out of {} new exploits into the database", countInserted,
				newExploits.size());

	}

}
