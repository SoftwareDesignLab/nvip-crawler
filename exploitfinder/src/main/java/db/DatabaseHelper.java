/**
 * Copyright 2023 Rochester Institute of Technology (RIT). Developed with
 * government support under contract 70RSAT19CB0000020 awarded by the United
 * States Department of Homeland Security.
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
package db;

import com.zaxxer.hikari.HikariConfig;
import com.zaxxer.hikari.HikariDataSource;
import com.zaxxer.hikari.pool.HikariPool.PoolInitializationException;
import model.exploit.Exploit;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

import java.sql.*;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

/**
 * 
 * The DatabaseHelper class is used to insert and update vulnerabilities found
 * from the webcrawler/processor to a sqlite database
 */
public class DatabaseHelper {
	private HikariConfig config = null;
	private HikariDataSource dataSource;
	private final Logger logger = LogManager.getLogger(getClass().getSimpleName());
	final String databaseType;

	private final String selectVulnerabilityIdSql = "SELECT vuln_id FROM vulnerability WHERE cve_id = ?";
	private final String getExploitsByCVEId =  "SELECT exploit_id FROM exploit WHERE cve_id = ?";
	private final String insertExploitSql = "INSERT INTO exploit (cve_id, exploit_date, exploit_source) VALUES (?,?,?);";

	// Regex101: https://regex101.com/r/9uaTQb/1
	public static final Pattern CPE_PATTERN = Pattern.compile("cpe:2\\.3:[aho\\*\\-]:([^:]*):([^:]*):([^:]*):.*");
	private static DatabaseHelper databaseHelper = null;

	/**
	 * Thread safe singleton implementation
	 *
	 * @return
	 */
	public static synchronized DatabaseHelper getInstance() {
		if (databaseHelper == null)
			databaseHelper = new DatabaseHelper();

		return databaseHelper;
	}

	/**
	 * The private constructor sets up HikariCP for connection pooling. Singleton
	 * DP!
	 */
	private DatabaseHelper() {
		// Get database type from envvars
		databaseType = System.getenv("DB_TYPE");
		logger.info("New NVIP.DatabaseHelper instantiated! It is configured to use " + databaseType + " database!");

		try {
			if (databaseType.equalsIgnoreCase("mysql"))
				Class.forName("com.mysql.cj.jdbc.Driver");
		} catch (ClassNotFoundException e2) {
			logger.error("Error while loading database type from environment variables! " + e2.toString());
		}

		if(config == null){
			logger.info("Attempting to create HIKARI from ENVVARs");
			config = createHikariConfigFromEnvironment();
		}

		try {
			if(config == null) throw new IllegalArgumentException();
			dataSource = new HikariDataSource(config); // init data source
		} catch (PoolInitializationException e2) {
			logger.error("Error initializing data source! Check the value of the database user/password in the environment variables! Current values are: {}", config != null ? config.getDataSourceProperties() : null);
			System.exit(1);

		}
	}

	private HikariConfig createHikariConfigFromEnvironment() {

		String url = System.getenv("HIKARI_URL");
		HikariConfig hikariConfig;

		if (url != null){
			logger.info("Creating HikariConfig with url={}", url);
			hikariConfig = new HikariConfig();
			hikariConfig.setJdbcUrl(url);
			hikariConfig.setUsername(System.getenv("HIKARI_USER"));
			hikariConfig.setPassword(System.getenv("HIKARI_PASSWORD"));

			System.getenv().entrySet().stream()
					.filter(e -> e.getKey().startsWith("HIKARI_"))
					.peek(e -> logger.info("Setting {} to HikariConfig", e.getKey()))
					.forEach(e -> hikariConfig.addDataSourceProperty(e.getKey(), e.getValue()));

		} else {
			hikariConfig = null;
		}

		return hikariConfig;
	}

	/**
	 * Retrieves the connection from the DataSource (HikariCP)
	 * 
	 * @return the connection pooling connection
	 * @throws SQLException
	 */
	public Connection getConnection() throws SQLException {
		return dataSource.getConnection();
	}

	/**
	 * Shut down connection pool.
	 */
	public void shutdown() {
		dataSource.close();
		config = null;
	}

	/**
	 * get vulnerability Id(s) of the CVE
	 *
	 * @param cveId
	 * @return
	 */
	public List<Integer> getVulnerabilityIdList(String cveId) {
		List<Integer> vulnIdList = new ArrayList<>();
		ResultSet rs;

		try (Connection connection = getConnection();
			 PreparedStatement pstmt = connection.prepareStatement(selectVulnerabilityIdSql)){

			pstmt.setString(1, cveId);
			rs = pstmt.executeQuery();
			while (rs.next()) {
				vulnIdList.add(rs.getInt("vuln_id"));
			}
		} catch (SQLException e) {
			logger.error(e.toString());
		}
		return vulnIdList;
	}

	/**
	 * Grab exploits by CVE ID
	 * @param cveId
	 * @return
	 */
	public ArrayList<Integer> getExploitIds(String cveId) {

		ArrayList<Integer> exploitIds = new ArrayList<>();
		try (Connection connection = getConnection();
			 PreparedStatement stmt = connection.prepareStatement(getExploitsByCVEId);) {

			stmt.setString(1, cveId);
			ResultSet rs = stmt.executeQuery();

			while (rs.next()) {
				exploitIds.add(rs.getInt("exploit_id"));
			}

		} catch (SQLException e) {
			throw new RuntimeException(e);
		}

		return exploitIds;
	}

	/**
	 * save exploit
	 *
	 * @param exploit
	 * @return
	 */
	public boolean insertExploit(Exploit exploit) {
		try (Connection conn = getConnection();
			 PreparedStatement pstmt = conn.prepareStatement(insertExploitSql)) {

			pstmt.setString(1, exploit.getCveId());
			pstmt.setDate(2, java.sql.Date.valueOf(exploit.getPublishDate()));
			pstmt.setString(3, exploit.getPublisherUrl());

			pstmt.executeUpdate();
		} catch (SQLException e) {
			logger.error("ERROR: Failed to save exploit with Vuln Id: {}\n{}", exploit.getVulnId(), e.toString());
			return false;
		}
		return true;
	}

	/**
	 * For formatting inputted dates to mysql dates
	 * @return
	 */
	public String formatDate(String date) {
		java.util.Date dateObj;
		String formattedDate = "";
		SimpleDateFormat df = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");

		if (date == null || date.isEmpty()) {
			dateObj = new java.util.Date();
			formattedDate = df.format(dateObj);
			return formattedDate;
		}

		if (date.contains("T")) {
			date = date.substring(0, 10) + " " + date.substring(11, 19);
		}

		Pattern dateRegex = Pattern.compile("(\\d{4}-\\d{2}-\\d{2}|\\d{2}\\/\\d{2}\\/\\d{4})");
		// Pattern dateRegex = Pattern.compile("(?i:jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)[a-z]*?\\s+\\d{1,2}(?:[a-z]{2})?(?:\\s+|,\\s*)\\d{4}\\b");
		Matcher regexMatcher = dateRegex.matcher(date);

		if (regexMatcher.find()) {
			date = regexMatcher.group() + " 00:00:00";
			// mitigate unparseable date error by getting rid of ordinal in date
			date = date.replaceFirst("(?<=\\d)(?:st|nd|rd|th)", "");
		}

		try {
			try {
				dateObj = new java.util.Date(date);
				formattedDate = df.format(dateObj);
			} catch (IllegalArgumentException e) {
				dateObj = df.parse(date);
				formattedDate = df.format(dateObj);
			}
		} catch (Exception e) {
			logger.info("ERROR: Failed to parse date: {}\n{}", date, e.toString());
		}
		return formattedDate;
	}
}